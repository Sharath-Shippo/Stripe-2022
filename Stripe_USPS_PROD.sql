DROP TABLE IF EXISTS console_query_variables;
CREATE TEMP TABLE console_query_variables AS
SELECT
    -- Date filter for whole query --> What dates range are we looking to pull?
    '2022-01-01 00:00:00'::timestamp AS query_start_timestamp_filter,
    '2023-02-01 00:00:00'::timestamp AS query_end_timestamp_filter,
    -- Date filter for source tables --> Given the above date range, what date ranges
    -- on the source tables should we look through?
    '2021-01-01 00:00:00'::timestamp AS source_tables_start_timestamp_filter,
    '2023-07-01 00:00:00'::timestamp AS source_tables_end_timestamp_filter,
    -16 AS fuzzymatchmin,     --DAYS
    6 AS fuzzymatchmax       --MONTHS
;
DROP TABLE IF EXISTS useroverride_detail;
CREATE TEMP TABLE useroverride_detail AS
    -- LOGIC PROVIDED BY DATA ENG TEAM (CALVIN)
SELECT
    uo2.id,
    uo2.object_owner_id,
    uo2.company_name_override,
    uo2.user_type_id,
    uo2.user_type_name,
    uo2.partner_platform
FROM
    (SELECT
         uo.id,
         uo.object_owner_id,
         uo.company_name_override,
         uo.user_type_id,
         t.name AS user_type_name,
         uo.partner_platform,
         RANK() OVER (PARTITION BY uo.object_owner_id ORDER BY uo.id DESC) rank_num
    FROM audit_data_se01_20230327.user_useroverride uo
    LEFT JOIN audit_data_se01_20230327.user_usertype t
    ON uo.user_type_id=t.id) uo2
WHERE uo2.rank_num = 1
--LIMIT 100
;


--Prod Invoices---
drop table if exists  Prod_Invoiceitem;
create temp table  Prod_Invoiceitem as
Select distinct invoice_id,paid,sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(converted_invcharge)::numeric(15,2) as converted_invcharge,sum(converted_invrefund)::numeric(15,2) as converted_invrefund from
 (
Select distinct invoice_id,paid,invi.object_updated,
                max(to_char( CASE
                       WHEN invi.amount != 0
                           OR invi.amount IS NOT NULL THEN invi.object_updated
                       ELSE NULL
                       END,'YYYY-MM-DD HH24:MI')) as invoice_date,
    sum(
                   CASE
                       WHEN invi.object_purpose != 'REFUND'
                           AND (
                                        invi.amount != 0
                                    OR invi.amount IS NOT NULL
                                ) THEN invi.amount
                       ELSE NULL
                       END
               ) AS invcharge,
    sum(
                   CASE
                       WHEN invi.object_purpose = 'REFUND'
                           AND (
                                        invi.amount != 0
                                    OR invi.amount IS NOT NULL
                                ) THEN (-1 * invi.amount)
                       ELSE NULL
                       END
               ) AS invrefund,
     sum(
                   CASE
                       WHEN invi.object_purpose != 'REFUND'
                           AND (
                                        invi.amount != 0
                                    OR invi.amount IS NOT NULL
                                ) THEN (invi.amount)/MC.rate_type
                       ELSE NULL
                       END
               ) AS converted_invcharge,
    sum(
                   CASE
                       WHEN invi.object_purpose = 'REFUND'
                           AND (
                                        invi.amount != 0
                                    OR invi.amount IS NOT NULL
                                ) THEN (-1 * invi.amount)/MC.rate_type
                       ELSE NULL
                       END
               ) AS converted_invrefund
from audit_data_se01_20230327.api_invoiceitem invi
    left join audit_data_se01_20230327.api_invoice on invi.invoice_id = api_invoice.id
left join (Select * from api_currency) CUR on invi.currency_id=CUR.id
left join (Select distinct "Currency"::varchar(5) as ISO_Currnecy,Date::date as Currency_date,"Rate"::numeric(15,2) as rate_type
           from "22_audit_stripe_currency_2021_01_01_2023_07_12") MC
   on  CUR.iso=MC.ISO_Currnecy and invi.object_updated::date=MC.Currency_date::date
where  invi.object_updated>= (Select query_start_timestamp_filter from console_query_variables)
and invi.object_updated< (Select query_end_timestamp_filter from console_query_variables)
  and
        (
        invi.amount != 0
       OR invi.amount IS NOT NULL
       )
and invoice_id is not null
group by 1,2,3)A
where paid>=(Select query_start_timestamp_filter from console_query_variables) --Change 1
and paid <(Select query_end_timestamp_filter from console_query_variables)--Change 2
group by 1,2;


drop table if exists Billing_payment_info;
create temp table Billing_payment_info as
Select distinct invoice_id,
 object_created,
   object_updated,
   row_number () over (partition by  invoice_id order by object_created desc) as billing_row,
   sum(amount) as amount,
   sum(converted_amount)::numeric(15,2) as Amount_Converted
  from (Select distinct invoice_id,payment_method_id,
  currency_id,
 object_created,
  object_updated,
   amount,
  amount / rate_type as converted_amount
 from audit_data_se01_20230327.billing_payment BP
  left join (Select * from api_currency) CUR on BP.currency_id=CUR.id
left join (Select distinct "Currency"::varchar(5) as ISO_Currnecy,Date::date as Currency_date,"Rate"::numeric(15,2) as rate_type
           from "22_audit_stripe_currency_2021_01_01_2023_07_12") MC
   on  CUR.iso=MC.ISO_Currnecy and BP.object_updated::date=MC.Currency_date::date
 where object_created >= (Select query_start_timestamp_filter from console_query_variables)
 and object_created < (Select query_end_timestamp_filter from console_query_variables)
 and payment_method_id not in (3)
  )A
group by 1, 2, 3;

drop table if exists Billing_payment_Braintree;
create temp table Billing_payment_Braintree as
Select distinct invoice_id,
 object_created,
   object_updated,
   row_number () over (partition by  invoice_id order by object_created desc) as billing_row,
   sum(amount) as amount,
   sum(converted_amount)::numeric(15,2) as Amount_Converted
  from (Select distinct invoice_id,payment_method_id,
  currency_id,
 object_created,
  object_updated,
   amount,
  amount / rate_type as converted_amount
 from audit_data_se01_20230327.billing_payment BP
  left join (Select * from api_currency) CUR on BP.currency_id=CUR.id
left join (Select distinct "Currency"::varchar(5) as ISO_Currnecy,Date::date as Currency_date,"Rate"::numeric(15,2) as rate_type
           from "22_audit_stripe_currency_2021_01_01_2023_07_12") MC
   on  CUR.iso=MC.ISO_Currnecy and BP.object_updated::date=MC.Currency_date::date
 where object_created >= (Select query_start_timestamp_filter from console_query_variables)
 and object_created < (Select query_end_timestamp_filter from console_query_variables)
 and payment_method_id  in (3)
  )A
group by 1, 2, 3;

drop table if exists Stripe_data;
create temp table  Stripe_data as
Select   distinct A.balance_transaction_id,A.description,A.reporting_Category,created_utc,available_on_utc,B.invoice_id,
                   TO_CHAR(TO_DATE(created_utc, 'YYYY-MM-DD'), 'Mon-YY') as Stripe_month,
                 case when A.description like '%retry%' or A.description like '%reattempt%' and  A.reporting_category
                                                                 in ('charge') or  (A.description like '%-%' and A.reporting_category in ('charge','refund')) then 1 else 0 end as Invoices_retry,
                case when (length(B.invoice_id::text)<=4 and length(B.invoice_id::text)>0 and  A.reporting_category in ('charge','refund'))  then 1 else 0 end as net_suite,
        A.Gross,
         A.net,
        A.customer_facing_amount
 from "22_audit_stripe_transaction_history_recon_2022_01_2022_12_no_errors" A --Change the table
left join (SELECT  description,reporting_Category,REGEXP_REPLACE(description, '[^0-9]+', '') AS invoice_id,
               customer_facing_amount,gross
 from "22_audit_stripe_transaction_history_recon_2022_01_2022_12_no_errors" --Change the table
 where reporting_category in ('charge', 'refund', 'charge_failure')
 ) B
 on A.description = B.description
 --where A.reporting_category in ('charge', 'refund', 'charge_failure')
 union
Select   distinct A.balance_transaction_id,A.description,A.reporting_Category,created_utc,available_on_utc,B.invoice_id,
                   TO_CHAR(TO_DATE(created_utc, 'YYYY-MM-DD'), 'Mon-YY') as Stripe_month,
                 case when A.description like '%retry%' and  A.reporting_category
                                                                 in ('charge') or  (A.description   like '%-%' and A.reporting_category in ('charge','refund')) then 1 else 0 end as Invoices_retry,
                case when (length(B.invoice_id::text)<=4 and length(B.invoice_id::text)>0 and  A.reporting_category in ('charge','refund'))  then 1 else 0 end as net_suite,
        A.Gross,
         A.net,
        A.customer_facing_amount
 from "22_audit_stripe_transaction_history_recon_2022_01_2022_12_no_errors" A --Change the table
left join (SELECT  description,reporting_Category,REGEXP_REPLACE(description, '[^0-9]+', '') AS invoice_id,
               customer_facing_amount,gross
 from "22_audit_stripe_transaction_history_recon_2023_01_2023_06_no_errors" --Change the table
 where reporting_category in ('charge', 'refund', 'charge_failure')
 and file_name in ('Itemized_balance_change_from_activity_USD_2023-01-01_to_2023-01-31.csv')
 ) B
 on A.description = B.description
 --where A.reporting_category in ('charge', 'refund', 'charge_failure')
    where file_name in ('Itemized_balance_change_from_activity_USD_2023-01-01_to_2023-01-31.csv')
union
    Select   distinct A.balance_transaction_id,A.description,A.reporting_Category,created_utc,available_on_utc,B.invoice_id,
                   TO_CHAR(TO_DATE(created_utc, 'YYYY-MM-DD'), 'Mon-YY') as Stripe_month,
                 case when A.description like '%retry%' or A.description like '%reattempt%' and  A.reporting_category
                                                                 in ('charge') or  (A.description like '%-%' and A.reporting_category in ('charge','refund')) then 1 else 0 end as Invoices_retry,
                case when (length(B.invoice_id::text)<=4 and length(B.invoice_id::text)>0 and  A.reporting_category in ('charge','refund'))  then 1 else 0 end as net_suite,
        A.Gross,
         A.net,
        A.customer_facing_amount
 from "22_audit_stripe_transaction_history_recon_2021_10_2021_12_no_errors" A --Change the table
left join (SELECT  description,reporting_Category,REGEXP_REPLACE(description, '[^0-9]+', '') AS invoice_id,
               customer_facing_amount,gross
 from "22_audit_stripe_transaction_history_recon_2022_01_2022_12_no_errors" --Change the table
 where reporting_category in ('charge', 'refund', 'charge_failure')
 ) B
 on A.description = B.description;
 --where A.reporting_category in ('charge', 'refund', 'charge_failure')

/**Invoice_base as (
Select distinct invoice_id from
(Select distinct invoice_id from stripe_data where net_suite=0)A
union
(Select distinct invoice_id from Prod_Invoiceitem)
union
(Select distinct invoice_id from Billing_payment_info)
),**/


/**invoice_date_info as (
Select distinct IB.invoice_id,
    BP.object_Created as date_info_billing_date,
    max(to_char(CASE
   WHEN invi.amount != 0
     OR invi.amount IS NOT NULL THEN invi.object_updated
    ELSE NULL
   END, 'YYYY-MM-DD HH24:MI')) as date_info_invoice_date
   from Invoice_base IB
 inner join
   (Select distinct invoice_id,object_updated,amount from api_invoiceitem  ) INVI on IB.invoice_id = INVI.invoice_id
   inner join (Select distinct invoice_id, object_Created from public.billing_payment where  payment_method_id not in (3)  ) BP
  on IB.invoice_id = BP.invoice_id
 group by 1, 2)**/


/*Invoice_having_pre2019 as (
Select distinct STRP.invoice_id,First_Created_Date,case when First_Created_Date::date<='2019-01-01' then 1 else 0 end as "Before_2019"
from Stripe_data STRP
    inner join (Select distinct invoice_id,min(to_char( CASE
                       WHEN invi.amount != 0
                           OR invi.amount IS NOT NULL THEN invi.object_created
                       ELSE NULL
                       END,'YYYY-MM-DD HH24:MI')) as First_Created_Date from api_invoiceitem invi
group by 1
)A on STRP.invoice_id=A.invoice_id)*/

/**
later_than_updated as (
Select distinct STRP.invoice_id, case when Prod_updated_date::date > Billing_created_date then 1 else 0 end as later_than_updated
from Stripe_data STRP
   left join  (Select distinct invoice_id,max(to_char( CASE
                       WHEN invi.amount != 0
                           OR invi.amount IS NOT NULL THEN invi.object_updated
                       ELSE NULL
                       END,'YYYY-MM-DD HH24:MI')) as Prod_updated_date from api_invoiceitem invi where  invoice_id=1969107 group by 1) inv on STRP.invoice_id=inv.invoice_id
    left join (Select distinct invoice_id,object_created as Billing_created_date
    from billing_payment
    where object_created>=TO_DATE(current_setting('ending.Billing.tblfilter'), 'YYYY-MM-DD')
    and invoice_id=1969107 ) BP on STRP.invoice_id=BP.invoice_id)**/

drop table if exists Invoice_check;
create temp table Invoice_check as
    Select distinct id,paid as invoice_paid,object_created as invoice_created from api_invoice
    where id in (Select distinct invoice_id from Stripe_data where net_suite=0 and Invoices_retry=0 and reporting_category in ('charge','refund'))
;
drop table if exists Billing_check;
create temp table Billing_check as
    Select distinct invoice_id,object_created as billing_created,amount  from billing_payment
    where id in (Select distinct invoice_id from Stripe_data where net_suite=0 and Invoices_retry=0 and reporting_category in ('charge','refund'))
;

drop table if exists Stripe_Summary;
create temp table Stripe_Summary as
Select Month, Category,reporting_Category,invoice_id,description,STRP_flag,INV_flag,Billing_flag,Braintree_flag,Before_2021,paid_before,pre_auth,Invoices_retry,net_suite,
       sum(customer_facing_amount)customer_facing_amount,sum(gross) as gross,sum(net) net,sum(USD_invcharge) as USD_invcharge,sum(USD_invrefund) as USD_invrefund,sum(USD_BP_Amount) as BIlling_Amount,
       sum(USD_BT_Amount) as Braintree_Amount
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,
      case when BT.invoice_id is not null then 1 else 0 end as Braintree_flag,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when description like'%Preauthorization hold for first label purchase%' then 1 else 0 end as pre_auth,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(converted_invcharge) as USD_invcharge,sum(converted_invrefund) as USD_invrefund,
                sum(BP.Amount_Converted) as USD_BP_Amount,sum(BT.Amount_Converted) as USD_BT_Amount
from           Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
   left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_Braintree where billing_row=1 group by 1,2,3) BT on STRP.invoice_id=BT.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14
union
Select Month, Category,reporting_Category,invoice_id,description,STRP_flag,INV_flag,Billing_flag,Braintree_flag,Before_2021,paid_before,pre_auth,Invoices_retry,net_suite,
       sum(customer_facing_amount)customer_facing_amount,sum(gross) as gross,sum(net) net,sum(USD_invcharge) as USD_invcharge,sum(USD_invrefund) as USD_invrefund,sum(USD_BP_Amount) as BIlling_Amount,
       sum(USD_BT_Amount) as Braintree_Amount
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,
    case when BT.invoice_id is not null then 1 else 0 end as Braintree_flag,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when description like'%Preauthorization hold for first label purchase%' then 1 else 0 end as pre_auth,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(converted_invcharge) as USD_invcharge,sum(converted_invrefund) as USD_invrefund,
                sum(BP.Amount_Converted) as USD_BP_Amount,sum(BT.Amount_Converted) as USD_BT_Amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
        left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_Braintree where billing_row=1 group by 1,2,3) BT on INV.invoice_id=BT.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14;

-- [[[RETIRED DO NOT USE]]] --
DROP TABLE IF EXISTS master_accounts;
CREATE TEMP TABLE master_accounts
(
    category text,
    account  int
);
INSERT INTO master_accounts (category, account)
VALUES ('2021_master_acct', '1516'),
       ('2021_master_acct', '1518'),
       ('2021_master_acct', '100367'),
       ('2021_master_acct', '100368'),
       ('2021_master_acct', '100369'),
       ('2021_master_acct', '100370'),
       ('2021_master_acct', '100371'),
       ('2021_master_acct', '100372'),
       ('2021_master_acct', '100383'),
       ('2022_master_acct', '1542'),
       ('2022_master_acct', '1543'),
       ('2022_master_acct', '1548'),
       ('2022_master_acct', '100385'),
       ('2022_master_acct', '100386'),
       ('2022_master_acct', '100502'),
       ('2022_master_acct', '100506'),
       ('2022_master_acct', '100508'),
       ('2022_master_acct', '100510'),
       ('2022_master_acct', '100512'),
       ('2022_master_acct', '100514'),
       ('2022_master_acct', '100516'),
       ('2022_master_acct', '100520'),
       ('2022_master_acct', '100522'),
       ('2022_master_acct', '100524'),
       ('2022_master_acct', '100528'),
       ('2022_master_acct', '100530'),
       ('2022_master_acct', '100532'),
       ('2022_master_acct', '100534'),
       ('2022_master_acct', '100536'),
       ('2022_master_acct', '100538'),
       ('2022_master_acct', '100540'),
       ('2022_master_acct', '100542'),
       ('2022_master_acct', '100546'),
       ('2022_master_acct', '100548'),
       ('2022_master_acct', '100550'),
       ('2022_master_acct', '100552'),
       ('2022_master_acct', '100554'),
       ('2022_master_acct', '100558'),
       ('2022_master_acct', '100560'),
       ('2022_master_acct', '100562'),
       ('2022_master_acct', '100564'),
       ('2022_master_acct', '100566'),
       ('2022_master_acct', '100568'),
       ('2022_master_acct', '100570'),
       ('2022_master_acct', '100572'),
       ('2022_master_acct', '100574'),
       ('2022_master_acct', '100576'),
       ('2022_master_acct', '100580'),
       ('2022_master_acct', '100584'),
       ('2022_master_acct', '100586'),
       ('2022_master_acct', '100588'),
       ('2022_master_acct', '100590'),
       ('2022_master_acct', '100594'),
       ('2022_master_acct', '100596'),
       ('2022_master_acct', '100598'),
       ('2022_master_acct', '100600'),
       ('2022_master_acct', '100602'),
       ('2022_master_acct', '100604'),
       ('2022_master_acct', '100606'),
       ('2022_master_acct', '100608'),
       ('2022_master_acct', '100610'),
       ('2022_master_acct', '100612'),
       ('2022_master_acct', '100614'),
       ('2022_master_acct', '100616'),
       ('2022_master_acct', '100618'),
       ('2022_master_acct', '100620'),
       ('2022_master_acct', '100630'),
       ('2022_esi_master_acct', '100374'),
       ('2022_esi_master_acct', '100373'),
       ('2022_esi_master_acct', '100376'),
       ('2022_esi_master_acct', '100375'),
       ('2022_esi_master_acct', '100377'),
       ('2022_esi_master_acct', '100381'),
       ('2022_esi_master_acct', '100380'),
       ('2022_esi_master_acct', '100379'),
       ('2022_esi_master_acct', '100378'),
       ('2022_esi_master_acct', '100384'),
       ('2022_esi_master_acct', '100387'),
       ('2022_esi_master_acct', '100388'),
       ('2022_esi_master_acct', '100389'),
       ('2022_esi_master_acct', '100390'),
       ('2022_esi_master_acct', '100392'),
       ('2022_esi_master_acct', '100391');
 -- [[[RETIRED DO NOT USE]]] --


------------------------------------
------------------------------------
-------- [[[BEGIN HERE]]] ----------
------------------------------------
------------------------------------

------------------------------------
--CREATE TABLES FROM LOOKER (PROD SCHEMA IN AUDIT_DATA)
------------------------------------
-- Attempts to replicate all relevant accounts required for audit from 1370 report
DROP TABLE IF EXISTS audit_data.looker_1370_accounts;
CREATE TABLE audit_data.looker_1370_accounts AS
SELECT carrier_own_account_indicator,
       master_carrier_account_id,
       master_carrier_ext_account_id,
       carrier_account_id,
       carrier_name,
       carrier_dim_id,
       provider_id
FROM prod.carrier_account_dim
       WHERE carrier_own_account_indicator IN
             (
              --'Customer Own Account'
              'Managed 3rd Party Master Account',
              'Express Save Master Account',
              'Shippo FC Master Account',
              'Shippo Master Account'
             )
         AND (provider_id in ('17') or carrier_name in ('USPS'))
         AND (master_carrier_account_id IS NOT NULL
                OR carrier_account_id IS NOT NULL)
GROUP BY 1,2,3,4,5,6,7
;

-- Attempts to provide clean USPS service level list from dwh/looker
DROP TABLE IF EXISTS audit_data.looker_svc_lvl;
CREATE TABLE audit_data.looker_svc_lvl AS
SELECT service_level_carrier_name,
       service_level_id,
       service_level_name
FROM prod.service_level_dim
WHERE service_level_carrier_name IN ('USPS')
    --AND (service_level_name ILIKE '%international%'
    --     OR
    --     service_level_name ILIKE '%global%')
    AND is_deleted IS FALSE
GROUP BY 1,2,3
;

-- Attempts to provide clean USPS service level list from USPS
DROP TABLE IF EXISTS audit_data.usps_svc_lvl;
CREATE TABLE audit_data.usps_svc_lvl
(
    usps_svc_lvl_id text,
    usps_svc_lvl_name text
);
INSERT INTO usps_svc_lvl (usps_svc_lvl_id,usps_svc_lvl_name)
VALUES ('bb', 'bound printed matter'),
       ('bl','library mail'),
       ('bs','media mail'),
       ('cp','priority mail international'),
       ('ex','priority mail express'),
       ('fc','first class package service'),
       ('ie','priority mail express international'),
       ('lc','first-class package international service'),
       ('lw','parcel select lightweight'),
       ('mr','priority mail return service'),
       ('pg','global express guaranteed'),
       ('pm','priority mail'),
       ('ps','parcel select'),
       ('rp','parcel select return service'),
       ('s2','usps marketing mail marketing parcels and usps marketing mail nonprofit'),
       ('sa','usps marketing mail non-profit')
;

-- Attempts to provide current year EPS_ID to ACH ID mapping for Refunds and Outbounds and ACH ID mapping only for returns
DROP TABLE IF EXISTS bcg_ach_mapping_detail;
CREATE TABLE audit_data.bcg_ach_mapping_detail AS
SELECT
    svb_pmt_mnth,
    eps_id,
    ach_id,
    eps_account,
    eps_name
FROM
  (SELECT DISTINCT
        "transaction type" AS type,
        svb_pmt_mnth,
        cast(transaction_id AS varchar) eps_id,
        ach_id,
        eps_account_number eps_account,
        eps_account_nickname eps_name
   FROM
        (
         SELECT * FROM audit_data."22_audit_eps_svb_transaction_history_recon_2021_12_2021_12_no_errors"
         UNION
         SELECT * FROM audit_data."22_audit_eps_svb_transaction_history_recon_2022_01_2022_12_no_errors"
         UNION
         SELECT * FROM audit_data."22_audit_eps_svb_transaction_history_recon_2023_01_2023_06_no_errors"
         --LIMIT 100
        )
   GROUP BY type, svb_pmt_mnth, eps_id, ach_id, eps_account, eps_name
   --ORDER BY RANDOM()
   --LIMIT 1000
  )
WHERE
  svb_pmt_mnth IS NOT NULL
  AND
  --eps_id IS NOT NULL -- Removes returns as returns are already linked to ach_id
  --AND
  type NOT IN ('ACH DEBIT','ADJUSTMENT','REVERSAL','TRANSFER FROM','TRANSFER TO')
  --AND
  --  bcg.name IN ('Shippo Returns ')
  AND
  svb_pmt_mnth IN
    (
    'JAN-22',
    'FEB-22',
    'MAR-22',
    'APR-22',
    'MAY-22',
    'JUN-22',
    'JUL-22',
    'AUG-22',
    'SEP-22',
    'OCT-22',
    'NOV-22',
    'DEC-22'
    )
GROUP BY
    svb_pmt_mnth, eps_id, ach_id, eps_account, eps_name
ORDER BY ach_id desc
--LIMIT 1000
;

------------------------------------
--CREATE TEMP TABLES FOR USE IN QUERIES MAKE SURE TO ADJUST DATES
------------------------------------
-- Create console_query_variables to determine variables for ALL applicable queries in this console
DROP TABLE IF EXISTS console_query_variables;
CREATE TEMP TABLE console_query_variables AS
SELECT
    -- Date filter for whole query --> What dates range are we looking to pull?
    '2022-01-01 00:00:00'::timestamp AS query_start_timestamp_filter,
    '2023-01-01 00:00:00'::timestamp AS query_end_timestamp_filter,
    -- Date filter for source tables --> Given the above date range, what date ranges
    -- on the source tables should we look through?
    '2021-06-01 00:00:00'::timestamp AS source_tables_start_timestamp_filter,
    '2023-07-01 00:00:00'::timestamp AS source_tables_end_timestamp_filter,
    -16 AS fuzzymatchmin,     --DAYS
    6 AS fuzzymatchmax       --MONTHS
;

-- Create the default sender address table to lookup customer name/ address information
DROP TABLE IF EXISTS default_address;
CREATE TEMP TABLE default_address AS
SELECT DISTINCT
  -- Looker/DWH only pulls in address table data for when default_sender is true (per Calvin),
  -- so this table is just mirroring what is available in looker
  *
FROM audit_data_se01_20230327.api_apiaddress addr
       LEFT JOIN
   (SELECT object_owner_id     ooid,
           min(object_created) unique_create_date
    FROM audit_data_se01_20230327.api_apiaddress
    WHERE is_default_sender is TRUE
    GROUP BY object_owner_id
    ORDER BY object_owner_id) AS uooid
   ON addr.object_owner_id = uooid.ooid AND addr.object_created = uooid.unique_create_date
WHERE (uooid.ooid is NOT NULL AND uooid.unique_create_date is NOT NULL)
 AND is_default_sender is TRUE
 --AND addr.object_owner_id in ('1400689')
 --AND (object_created >= (select source_tables_start_timestamp_filter from query_variables)
 --AND object_created < (select source_tables_end_timestamp_filter from query_variables))
 --limit 10
;

-- Create the user_override detail table that is required for mirroring company name in looker
DROP TABLE IF EXISTS useroverride_detail;
CREATE TEMP TABLE useroverride_detail AS
    -- LOGIC PROVIDED BY DATA ENG TEAM (CALVIN)
SELECT
    uo2.id,
    uo2.object_owner_id,
    uo2.company_name_override,
    uo2.user_type_id,
    uo2.user_type_name,
    uo2.partner_platform
FROM
    (SELECT
         uo.id,
         uo.object_owner_id,
         uo.company_name_override,
         uo.user_type_id,
         t.name AS user_type_name,
         uo.partner_platform,
         RANK() OVER (PARTITION BY uo.object_owner_id ORDER BY uo.id DESC) rank_num
    FROM audit_data_se01_20230327.user_useroverride uo
    LEFT JOIN audit_data_se01_20230327.user_usertype t
    ON uo.user_type_id=t.id) uo2
WHERE uo2.rank_num = 1
--LIMIT 100
;

-- Create the platform detail table to provide platform insights on transactions
DROP TABLE IF EXISTS platform_detail;
CREATE TEMP TABLE platform_detail AS
SELECT DISTINCT
  -- This query pulls in the associated platform name to identify transactions associated with platforms like Shopify
  -- This can be joined to the platform id on the auth user table (ONLY)
  pf.integration_user_id pf_user_id,
  pf.id                  pf_id,
  --pf.object_id            pf_obj_id,
  pf.name                pf_name
FROM audit_data_se01_20230327.platform pf
-- Limit 25
;

-- Create the account_detail table to pull applicable master/ account id's required for analysis from prod schema
DROP TABLE IF EXISTS account_detail;
CREATE TEMP TABLE account_detail AS
SELECT DISTINCT
  -- This query pulls in Carrier account and master account information
  acct.id,
  acct.account_id,
  acct.master_carrier_account_id,
  mca.ext_account_id
FROM audit_data_se01_20230327.api_account acct
       LEFT JOIN audit_data_se01_20230327.api_mastercarrieraccount mca ON acct.master_carrier_account_id = mca.id
       --LEFT JOIN master_accounts ma ON acct.master_carrier_account_id = ma.master_account_id
            --OLD JOIN REPLACED BY looker_1370_accounts
       LEFT JOIN
            (SELECT master_carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1) AS lma ON acct.master_carrier_account_id = lma.master_carrier_account_id
       LEFT JOIN
            (SELECT carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1) AS lca ON acct.id = lca.carrier_account_id
where (lma.master_carrier_account_id IS NOT NULL
       OR
       lca.carrier_account_id IS NOT NULL)
--(acct.id in ('6536') AND acct.account_id in ('shippo_usps_master'))
           --AND acct.master_carrier_account_id is NULL)
-- Unsure what the relevance of 6536 is, have created ticket ENG-37145
 --Limit 10
;

-- Create the submission type table to show whether a transaction has been submitted to USPS (file generated in S3) or not
DROP TABLE IF EXISTS submission_type;
CREATE TEMP TABLE submission_type AS
SELECT DISTINCT
  -- Pulls the first subtype ID / sub ID for a transaction type
  ast1.transaction_id,
  min(
          CASE
              WHEN ast1.transaction_id = ssf.transaction_id THEN ssf.submission_type_id
              ELSE as1.submission_type_id
              END
      ) AS sub_type_id,
  min(
          CASE
              WHEN ast1.transaction_id = ssf.transaction_id THEN ssf.submission_id
              ELSE ast1.submission_id
              END
      ) AS sub_id
FROM audit_data_se01_20230327.adapter_submission_transactions ast1 --, submission_variables
    LEFT JOIN audit_data_se01_20230327.adapter_submission as1 ON ast1.submission_id = as1.id
        AND (as1.group_submission_datetime >= (select source_tables_start_timestamp_filter from console_query_variables)
        AND as1.group_submission_datetime < (select source_tables_end_timestamp_filter from console_query_variables))

    LEFT JOIN
        (SELECT DISTINCT
        -- Compiles submissions by transactions where submission type =1
        -- Submission type 1 is the SSF or Shipping Services File for USPS
        -- The other submission type is SPEF or Shipping Partner Event File is a pre-manifest file
        -- We don't care about the SPEF for this purpose
            ast0.transaction_id,
            as0.submission_type_id,
            ast0.submission_id
        FROM audit_data_se01_20230327.adapter_submission_transactions ast0
            LEFT JOIN audit_data_se01_20230327.adapter_submission as0 ON ast0.submission_id = as0.id
                AND (as0.group_submission_datetime >= (select source_tables_start_timestamp_filter from console_query_variables)
                AND as0.group_submission_datetime < (select source_tables_end_timestamp_filter from console_query_variables))
                    WHERE as0.submission_type_id = 1
        --GROUP BY
        --transaction_id
        ORDER BY transaction_id --limit 10
        ) AS ssf ON ast1.transaction_id = ssf.transaction_id
GROUP BY ast1.transaction_id
ORDER BY ast1.transaction_id
 -- Limit 10
;
-- Create the recon table, takes recon information and one-lines it against each transaction
DROP TABLE IF EXISTS reconciliation;
CREATE TEMP TABLE reconciliation AS
SELECT DISTINCT
  -- Pulls together our reconciliation information related to a transaction
  -- This is essentially parsed carrier files from S3 along with files manually uploaded (by Cindy)
  -- into Admin.
  -- Currently this is as close as we get to having raw carrier data files in production
  transaction_id,
  SUM(
          CASE
              WHEN type_id = 1
                  AND (
                               adjustment_amount != 0
                           OR adjustment_amount IS NOT NULL
                       ) THEN adjustment_amount * -1
              ELSE NULL
              END
      )                       AS unknown,
  SUM(
          CASE
              WHEN type_id = 2
                  AND (
                               adjustment_amount != 0
                           OR adjustment_amount IS NOT NULL
                       ) THEN adjustment_amount * -1
              ELSE NULL
              END
      )                       AS refund,
  SUM(
          CASE
              WHEN type_id = 3
                  AND (
                               adjustment_amount != 0
                           OR adjustment_amount IS NOT NULL
                       ) THEN adjustment_amount * -1
              ELSE NULL
              END
      )                       AS cubic,
  SUM(
          CASE
              WHEN type_id = 4
                  AND (
                               adjustment_amount != 0
                           OR adjustment_amount IS NOT NULL
                       ) THEN adjustment_amount * -1
              ELSE NULL
              END
      )                       AS wrong_dimensions_weight,
  SUM(
          CASE
              WHEN type_id = 7
                  AND (
                               adjustment_amount != 0
                           OR adjustment_amount IS NOT NULL
                       ) THEN adjustment_amount * -1
              ELSE NULL
              END
      )                       AS repeat_lbl_use,
  SUM(
          CASE
              WHEN type_id = 8
                  AND (
                               adjustment_amount != 0
                           OR adjustment_amount IS NOT NULL
                       ) THEN adjustment_amount * -1
              ELSE NULL
              END
      )                       AS unmanifested_lbl,
  SUM(
          CASE
              WHEN type_id = 12
                  AND (
                               adjustment_amount != 0
                           OR adjustment_amount IS NOT NULL
                       ) THEN adjustment_amount * -1
              ELSE NULL
              END
      )                       AS postage_adj_factor,
  SUM(
          CASE
              WHEN type_id = 13
                  AND (
                               adjustment_amount != 0
                           OR adjustment_amount IS NOT NULL
                       ) THEN adjustment_amount * -1
              ELSE NULL
              END
      )                       AS transaction_recognition,
  SUM(
          CASE
              WHEN type_id = 16
                  AND (
                               adjustment_amount != 0
                           OR adjustment_amount IS NOT NULL
                       ) THEN adjustment_amount * -1
              ELSE NULL
              END
      )                       AS incorrect_postage,
  SUM(
          CASE
              WHEN type_id = 17
                  AND (
                               adjustment_amount != 0
                           OR adjustment_amount IS NOT NULL
                       ) THEN adjustment_amount * -1
              ELSE NULL
              END
      )                       AS postage_charge,
  SUM(
          CASE
              WHEN type_id = 18
                  AND (
                               adjustment_amount != 0
                           OR adjustment_amount IS NOT NULL
                       ) THEN adjustment_amount * -1
              ELSE NULL
              END
      )                       AS deterministic_surcharge,
  SUM(adjustment_amount * -1) AS total_addtnl_calc_carrier_cost,
  MAX(
          CASE
              WHEN adjustment_amount != 0
                  OR adjustment_amount IS NOT NULL THEN reconcile_item_time
              ELSE NULL
              END
      )                       AS last_recon_date
FROM audit_data_se01_20230327.adapter_reconcile_grp_item
    WHERE adjustment_amount != 0
    AND (reconcile_item_time >= (select source_tables_start_timestamp_filter from console_query_variables)
    AND reconcile_item_time < (select source_tables_end_timestamp_filter from console_query_variables))
GROUP BY transaction_id
ORDER BY transaction_id
 -- limit 10
;
-- Create the invoice table, takes the invoice item table and one-lines it against each transaction
DROP TABLE IF EXISTS invoice_detail;
CREATE TEMP TABLE invoice_detail AS
SELECT DISTINCT
  -- Pulls together invoice item data along with payment status information from
  -- Billing table and invoice table as there are 3 separate payment status fields
  invi.transaction_id,
  invi.invoice_id,
  ac.iso   currency,
  sum(
          CASE
              WHEN invi.object_purpose = 'REFUND'
                  AND (
                               invi.amount != 0
                           OR invi.amount IS NOT NULL
                       ) THEN (-1 * invi.amount)
              ELSE NULL
              END
      ) AS invrefund,
  sum(
          CASE
              WHEN invi.object_purpose != 'REFUND'
                  AND (
                               invi.amount != 0
                           OR invi.amount IS NOT NULL
                       ) THEN invi.amount
              ELSE NULL
              END
      ) AS invcharge,
  sum(
          CASE
              WHEN invi.object_purpose = 'REFUND'
                  AND inv.paid IS NOT NULL
                  AND (
                               invi.amount != 0
                           OR invi.amount IS NOT NULL
                       ) THEN (-1 * invi.amount)
              ELSE NULL
              END
      ) AS invrefund_paid_inv,
  sum(
          CASE
              WHEN invi.object_purpose != 'REFUND'
                  AND inv.paid IS NOT NULL
                  AND (
                               invi.amount != 0
                           OR invi.amount IS NOT NULL
                       ) THEN invi.amount
              ELSE NULL
              END
      ) AS invcharge_paid_inv,
  sum(
          CASE
              WHEN invi.object_purpose = 'REFUND'
                  AND inv.status_id = 5 -- indicates fully paid
                  AND (
                               invi.amount != 0
                           OR invi.amount IS NOT NULL
                       ) THEN (-1 * invi.amount)
              ELSE NULL
              END
      ) AS invrefund_paid_inv_status,
  sum(
          CASE
              WHEN invi.object_purpose != 'REFUND'
                  AND inv.status_id = 5 -- indicates fully paid
                  AND (
                               invi.amount != 0
                           OR invi.amount IS NOT NULL
                       ) THEN invi.amount
              ELSE NULL
              END
      ) AS invcharge_paid_inv_status,
  sum(
          CASE
              WHEN invi.object_purpose = 'REFUND'
                  AND bp.status_id = '2' -- indicates fully paid
                  AND (
                               invi.amount != 0
                           OR invi.amount IS NOT NULL
                       ) THEN (-1 * invi.amount)
              ELSE NULL
              END
      ) AS invrefund_paid_bp,
  sum(
          CASE
              WHEN invi.object_purpose != 'REFUND'
                  AND bp.status_id = '2' -- indicates fully paid
                  AND (
                               invi.amount != 0
                           OR invi.amount IS NOT NULL
                       ) THEN invi.amount
              ELSE NULL
              END
      ) AS invcharge_paid_bp,
  sum(CASE
          WHEN invi.type_id = 1
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS label_payment_ref,
  sum(CASE
          WHEN invi.type_id = 1
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS label_payment,
  sum(CASE
          WHEN invi.type_id = 2
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS label_failure_ref,
  sum(CASE
          WHEN invi.type_id = 2
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS label_failure,
  sum(CASE
          WHEN invi.type_id = 3
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS label_surcharge_ref,
  sum(CASE
          WHEN invi.type_id = 3
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS label_surcharge,
  sum(CASE
          WHEN invi.type_id = 4
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS label_refund_ref,
  sum(CASE
          WHEN invi.type_id = 4
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS label_refund,
  sum(CASE
          WHEN invi.type_id = 5
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS rebate_ref,
  sum(CASE
          WHEN invi.type_id = 5
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS rebate,
  sum(CASE
          WHEN invi.type_id = 6
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS one_off_credit_ref,
  sum(CASE
          WHEN invi.type_id = 6
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS one_off_credit,
  sum(CASE
          WHEN invi.type_id = 7
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS legacy_charge_ref,
  sum(CASE
          WHEN invi.type_id = 7
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS legacy_charge,
  sum(CASE
          WHEN invi.type_id = 8
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS legacy_refund_ref,
  sum(CASE
          WHEN invi.type_id = 8
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS legacy_refund,
  sum(CASE
          WHEN invi.type_id = 9
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS track_fee_ref,
  sum(CASE
          WHEN invi.type_id = 9
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS track_fee,
  sum(CASE
          WHEN invi.type_id = 10
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS address_validation_fee_ref,
  sum(CASE
          WHEN invi.type_id = 10
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS address_validation_fee,
  sum(CASE
          WHEN invi.type_id = 11
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS branding_ref,
  sum(CASE
          WHEN invi.type_id = 11
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS branding,
  sum(CASE
          WHEN invi.type_id = 12
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS multi_user_login_ref,
  sum(CASE
          WHEN invi.type_id = 12
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS multi_user_login,
  sum(CASE
          WHEN invi.type_id = 13
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS insurance_fee_ref,
  sum(CASE
          WHEN invi.type_id = 13
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS insurance_fee,
  sum(CASE
          WHEN invi.type_id = 14
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS label_fee_ref,
  sum(CASE
          WHEN invi.type_id = 14
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS label_fee,
  sum(CASE
          WHEN invi.type_id = 15
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS subscription_plan_fee_ref,
  sum(CASE
          WHEN invi.type_id = 15
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS subscription_plan_fee,
  sum(CASE
          WHEN invi.type_id = 16
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS postage_price_ref,
  sum(CASE
          WHEN invi.type_id = 16
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS postage_price,
  sum(CASE
          WHEN invi.type_id = 17
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS promo_code_credit_ref,
  sum(CASE
          WHEN invi.type_id = 17
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS promo_code_credit,
  sum(CASE
          WHEN invi.type_id = 18
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS label_price_true_up_charge_ref,
  sum(CASE
          WHEN invi.type_id = 18
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS label_price_true_up_charge,
  sum(CASE
          WHEN invi.type_id = 19
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS label_price_true_up_refund_ref,
  sum(CASE
          WHEN invi.type_id = 19
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS label_price_true_up_refund,
  sum(CASE
          WHEN invi.type_id = 20
              AND invi.object_purpose = 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN (-1 * invi.amount)
          ELSE NULL
      END
      ) AS preauth_capture_ref,
  sum(CASE
          WHEN invi.type_id = 20
              AND invi.object_purpose != 'REFUND'
              AND (invi.amount != 0 OR invi.amount IS NOT NULL)
              THEN invi.amount
          ELSE NULL
      END
      ) AS preauth_capture,
  MAX(
          CASE
              WHEN invi.amount != 0
                  OR invi.amount IS NOT NULL THEN invi.object_created
              ELSE NULL
              END
      ) AS last_inv_date,
  MIN(
          CASE
              WHEN invi.amount != 0
                  OR invi.amount IS NOT NULL THEN invi.object_created
              ELSE NULL
              END
      ) AS first_inv_date,
  -- Below date was agreed upon for use in the stripe reconciliation by Terry Guan from the billing team and Stephen in Oct of 2022
  MIN(
          CASE
              WHEN invi.amount != 0
                  OR invi.amount IS NOT NULL THEN bp.initial_fully_paid_date
              ELSE NULL
              END
      ) AS inv_to_merchant_date

FROM audit_data_se01_20230327.api_invoiceitem invi
       LEFT JOIN audit_data_se01_20230327.api_invoice inv ON invi.invoice_id = inv.id
            AND (inv.object_created >= (select source_tables_start_timestamp_filter from console_query_variables)
            AND inv.object_created < (select source_tables_end_timestamp_filter from console_query_variables))
       LEFT JOIN
            (SELECT
                 invoice_id,
                 min(object_created) initial_fully_paid_date,
                 status_id
                 FROM  audit_data_se01_20230327.billing_payment
                 WHERE status_id in ('2')
                 GROUP BY invoice_id, status_id
                 ) AS bp ON inv.id = bp.invoice_id
            AND (bp.initial_fully_paid_date >= (select source_tables_start_timestamp_filter from console_query_variables)
            AND bp.initial_fully_paid_date < (select source_tables_end_timestamp_filter from console_query_variables))
       LEFT JOIN audit_data_se01_20230327.api_currency ac ON invi.currency_id = ac.id

WHERE
        --invi.object_created >= '2021-06-01'
        --AND invi.object_created < '2022-04-01'
        (invi.object_created >= (select source_tables_start_timestamp_filter from console_query_variables)
            AND invi.object_created < (select source_tables_end_timestamp_filter from console_query_variables))
        AND (
              invi.amount != 0
              OR invi.amount IS NOT NULL
            )
GROUP BY invi.transaction_id, ac.iso,invi.invoice_id
 -- limit 10
;


-- Create shipment_detail table for tracking shipment attributes (return) and additional address detail (from, to, return, alt)
DROP TABLE IF EXISTS shipment_detail;
CREATE TEMP TABLE shipment_detail AS
SELECT DISTINCT
  -- Pulls shipment information
  shp.id,
  shp.is_return,
  shp.return_of_id,
  shp.submission_type,

  frmaddr.zip       origin_zip,
  frmaddr.company   origin_company_name,
  frmaddr.name      origin_name,

  toaddr.zip        destination_zip,
  toaddr.company    destination_company_name,
  toaddr.name       destination_name,

  rtnaddr.zip       return_zip,
  rtnaddr.company   return_company_name,
  rtnaddr.name      return_name,

  alttoaddr.zip     alttoaddr_zip,
  alttoaddr.company alttoaddr_company_name,
  alttoaddr.name    alttoaddr_name,

  -- ZIP exclusion

  CASE
      WHEN left(frmaddr.zip, 3) in ('006', '007', '008', '009', '090', '091', '092', '093', '094',
                                    '095', '096', '097', '098', '099', '340', '962', '963', '964',
                                    '965', '966', '967', '968', '969', '995', '996', '997', '998', '999')
          OR left(toaddr.zip, 3) in ('006', '007', '008', '009', '090', '091', '092', '093', '094',
                                     '095', '096', '097', '098', '099', '340', '962', '963', '964',
                                     '965', '966', '967', '968', '969', '995', '996', '997', '998', '999')
          THEN 'zip_exclusion'
      END
      AS            zip_exclusion,


  -- OUTBOUND OR RETURN


  CASE
      WHEN (shp.is_return is true OR shp.return_of_id IS NOT NULL) THEN 'return'
      ELSE 'outbound'
      END
      AS            out_or_rtn

FROM audit_data_se01_20230327.api_shipment shp

       LEFT JOIN (Select distinct id,zip,company,name,object_owner_id from  audit_data_se01_20230327.api_address) frmaddr ON shp.address_from_id = frmaddr.id and shp.object_owner_id = frmaddr.object_owner_id
  --AND (frmaddr.object_created >= (select source_tables_start_timestamp_filter from query_variables)
  --AND frmaddr.object_created < (select source_tables_end_timestamp_filter from query_variables))
       LEFT JOIN (Select distinct id,zip,company,name,object_owner_id from  audit_data_se01_20230327.api_address) rtnaddr ON shp.address_return_id = rtnaddr.id and shp.object_owner_id = rtnaddr.object_owner_id
  --AND (rtnaddr.object_created >= (select source_tables_start_timestamp_filter from query_variables)
  --AND rtnaddr.object_created < (select source_tables_end_timestamp_filter from query_variables))
       LEFT JOIN (Select distinct id,zip,company,name,object_owner_id from  audit_data_se01_20230327.api_address) toaddr ON shp.address_to_id = toaddr.id and shp.object_owner_id = toaddr.object_owner_id
  --AND (toaddr.object_created >= (select source_tables_start_timestamp_filter from query_variables)
  --AND toaddr.object_created < (select source_tables_end_timestamp_filter from query_variables))
       LEFT JOIN (Select distinct id,zip,company,name,object_owner_id from  audit_data_se01_20230327.api_address) alttoaddr ON shp.alternate_address_to_id = alttoaddr.id and shp.object_owner_id = alttoaddr.object_owner_id
   --AND (alttoaddr.object_created >= (select source_tables_start_timestamp_filter from query_variables)
   --AND alttoaddr.object_created < (select source_tables_end_timestamp_filter from query_variables))

WHERE (shp.object_created >= (select source_tables_start_timestamp_filter from console_query_variables)
  AND shp.object_created < (select source_tables_end_timestamp_filter from console_query_variables))
 -- limit 10
;
-- Create transaction_detail table for main prod query information
DROP TABLE IF EXISTS transaction_detail;
CREATE TEMP TABLE transaction_detail AS
SELECT DISTINCT
      -- Pulls required data from api_transaction and direct joins the following tables
      -- api_rate, track_status, auth_user, api_refund, user_useroverride_tmp

      -- Api_transaction
      txn.id                                       api_transaction_id,
      txn.cost_usd                                 est_postage_cost,
      txn.amount                                   actual_postage_cost,
      txn.was_test,
      txn.object_state                             api_transaction_object_state,
      txn.object_status                            api_transaction_object_status,
      txn.tracking_number,
      txn.entry_point,
      txn.scan_form_id,
      txn.track_status_id,
      txn.api_rate_id,
      txn.object_created                           api_transaction_object_created,
      txn.object_updated                           api_transaction_object_updated,
      txn.object_owner_id                          api_transaction_object_owner,
      r8.amount                                    user_rate,
      r8.insurance_amount,
      r8.amount_insurance_fee                      insurance_fee,
      r8.insurance_cost,
      r8.zone,
      r8.servicelevel_id,
      r8.servicelevel_name,
      r8.provider_id,
      r8.shipment_id,
      r8.account_id,
      ts.name                                      track_status_name,
      au.id                                        au_id,
      au.apiuser_id                                api_user_id,
      au.username,
      au.platform_id,
      uuo.company_name_override,
      ref.object_status                            api_refund_object_status,
      ref.carrier_status                           api_refund_carrier_status,
      ref.approve_time                             api_refund_approve_time,

      -- Discount group name - should be replaced with billing_discount_group table
      -- Once Data Eng adds it to the Audit DB
      CASE
          WHEN r8.discount_group_id = 1
              THEN 'EBAY_CA'
          WHEN r8.discount_group_id = 2
              THEN 'EBAY_US'
          WHEN r8.discount_group_id = 3
              THEN 'ES_SHIPPO_REFERRED'
          WHEN r8.discount_group_id = 4
              THEN 'ES_EXPRESS_SAVE_REFERRED'
          ELSE 'NOT SET'
          END                                   AS discount_group_name,

      -- Scanbased_outbound_indicator logic from Hong-Kit, 20221129 part of transform logic from DWH to OLTP
      CASE
          WHEN r8.provider_id in
               (
                5, -- FedEx
                50, -- Hermes UK
                56, -- DPD UK
                95, -- Colissimo
                96, -- DPD DE
                98, -- Poste Italiane
                38, -- Mondial Relay
                41, -- OnTrac
                28, -- Correos
                40 -- LaserShip
                   )
              THEN 'Scan-Based Outbound'
          ELSE 'Not Scan-Based Outbound'
          END                                   as scanbased_outbound_indicator,

      -- Label and Refund dates formatted
      to_char(txn.object_created, 'MON-YY')     AS lbl_generation_mnth,

      to_char(ref.approve_time, 'MON-YY')       AS refund_date_mnth,

      to_char(txn.object_created, 'YYYY-MM-DD') AS lbl_generation_date,

      to_char(ref.approve_time, 'YYYY-MM-DD')   AS refund_approval_time,

      to_char(txn.object_updated, 'YYYY-MM-DD') AS trx_updated

  FROM audit_data_se01_20230327.api_transaction txn
           LEFT JOIN audit_data_se01_20230327.api_refund ref ON txn.id = ref.transaction_id
      AND (ref.object_created >= (select source_tables_start_timestamp_filter from console_query_variables)
          AND ref.object_created < (select source_tables_end_timestamp_filter from console_query_variables))
           LEFT JOIN audit_data_se01_20230327.track_status ts ON txn.track_status_id = ts.id
           LEFT JOIN audit_data_se01_20230327.api_rate r8 ON txn.api_rate_id = r8.id
      AND (r8.object_created >= (select source_tables_start_timestamp_filter from console_query_variables)
          AND r8.object_created < (select source_tables_end_timestamp_filter from console_query_variables))
           LEFT JOIN audit_data_se01_20230327.auth_user au ON txn.object_owner_id = au.id
           LEFT JOIN useroverride_detail uuo ON txn.object_owner_id = uuo.object_owner_id

  WHERE (txn.object_created >= (select source_tables_start_timestamp_filter from console_query_variables)
      AND txn.object_created < (select source_tables_end_timestamp_filter from console_query_variables))
    AND au.id NOT IN ('1206048')
    AND txn.object_state = 'VALID'
    AND txn.was_test = 'false'
    -- oltp transform logic from Hong-Kit 20221130
    AND txn.object_status NOT IN ('ERROR', 'WAITING', 'QUEUED')
    -- diagnostic/ filter logic
   AND r8.provider_id = '17'
    --AND txn.object_owner_id in ('')
--        AND txn.id in
--            (
--'750448009',
--'750460534',
--'750679110',
--'750557676',
--'750725632'
--         )

  ORDER BY txn.id
  -- limit 10
;


-- Create zara_transaction_detail table for main prod query information
DROP TABLE IF EXISTS zara_transaction_detail;
CREATE TEMP TABLE zara_transaction_detail AS
SELECT DISTINCT
      -- Pulls required data from api_transaction and direct joins the following tables
      -- api_rate, track_status, auth_user, api_refund, user_useroverride_tmp

      -- Api_transaction
      txn.id                                       api_transaction_id,
      txn.cost_usd                                 est_postage_cost,
      txn.amount                                   actual_postage_cost,
      txn.was_test,
      txn.object_state                             api_transaction_object_state,
      txn.object_status                            api_transaction_object_status,
      txn.tracking_number,
      txn.entry_point,
      txn.scan_form_id,
      txn.track_status_id,
      txn.api_rate_id,
      txn.object_created                           api_transaction_object_created,
      txn.object_updated                           api_transaction_object_updated,
      txn.object_owner_id                          api_transaction_object_owner,
      r8.amount                                    user_rate,
      r8.insurance_amount,
      r8.amount_insurance_fee                      insurance_fee,
      r8.insurance_cost,
      r8.zone,
      r8.servicelevel_id,
      r8.servicelevel_name,
      r8.provider_id,
      r8.shipment_id,
      r8.account_id,
      ts.name                                      track_status_name,
      au.id                                        au_id,
      au.apiuser_id                                api_user_id,
      au.username,
      au.platform_id,
      uuo.company_name_override,
      ref.object_status                            api_refund_object_status,
      ref.carrier_status                           api_refund_carrier_status,
      ref.approve_time                             api_refund_approve_time,

      -- Discount group name - should be replaced with billing_discount_group table
      -- Once Data Eng adds it to the Audit DB
      CASE
          WHEN r8.discount_group_id = 1
              THEN 'EBAY_CA'
          WHEN r8.discount_group_id = 2
              THEN 'EBAY_US'
          WHEN r8.discount_group_id = 3
              THEN 'ES_SHIPPO_REFERRED'
          WHEN r8.discount_group_id = 4
              THEN 'ES_EXPRESS_SAVE_REFERRED'
          ELSE 'NOT SET'
          END                                   AS discount_group_name,

      -- Scanbased_outbound_indicator logic from Hong-Kit, 20221129 part of transform logic from DWH to OLTP
      CASE
          WHEN r8.provider_id in
               (
                5, -- FedEx
                50, -- Hermes UK
                56, -- DPD UK
                95, -- Colissimo
                96, -- DPD DE
                98, -- Poste Italiane
                38, -- Mondial Relay
                41, -- OnTrac
                28, -- Correos
                40 -- LaserShip
                   )
              THEN 'Scan-Based Outbound'
          ELSE 'Not Scan-Based Outbound'
          END                                   as scanbased_outbound_indicator,

      -- Label and Refund dates formatted
      to_char(txn.object_created, 'MON-YY')     AS lbl_generation_mnth,

      to_char(ref.approve_time, 'MON-YY')       AS refund_date_mnth,

      to_char(txn.object_created, 'YYYY-MM-DD') AS lbl_generation_date,

      to_char(ref.approve_time, 'YYYY-MM-DD')   AS refund_approval_time,

      to_char(txn.object_updated, 'YYYY-MM-DD') AS trx_updated

  FROM audit_data_se01_20230327.api_transaction txn
           LEFT JOIN audit_data_se01_20230327.api_refund ref ON txn.id = ref.transaction_id
      AND (ref.object_created >= (select source_tables_start_timestamp_filter from console_query_variables)
          AND ref.object_created < (select source_tables_end_timestamp_filter from console_query_variables))
           LEFT JOIN audit_data_se01_20230327.track_status ts ON txn.track_status_id = ts.id
           LEFT JOIN audit_data_se01_20230327.api_rate r8 ON txn.api_rate_id = r8.id
      AND (r8.object_created >= (select source_tables_start_timestamp_filter from console_query_variables)
          AND r8.object_created < (select source_tables_end_timestamp_filter from console_query_variables))
           LEFT JOIN audit_data_se01_20230327.auth_user au ON txn.object_owner_id = au.id
           LEFT JOIN useroverride_detail uuo ON txn.object_owner_id = uuo.object_owner_id

  WHERE (txn.object_created >= (select source_tables_start_timestamp_filter from console_query_variables)
      AND txn.object_created < (select source_tables_end_timestamp_filter from console_query_variables))
   -- AND txn.object_state = 'VALID'
   -- AND txn.was_test = 'false'
    -- oltp transform logic from Hong-Kit 20221130
   -- AND txn.object_status NOT IN ('ERROR', 'WAITING', 'QUEUED')
    -- diagnostic/ filter logic
   AND au.id IN ('1206048')
   AND r8.provider_id = '17'
    --AND txn.object_owner_id in ('')
--        AND txn.id in
--            (
--'750448009',
--'750460534',
--'750679110',
--'750557676',
--'750725632'
--         )

  ORDER BY txn.id
  -- limit 10
;
drop table if exists Stripe_data;
create temp table  Stripe_data as
Select   distinct A.balance_transaction_id,A.description,A.reporting_Category,created_utc,available_on_utc,B.invoice_id,
                   TO_CHAR(TO_DATE(created_utc, 'YYYY-MM-DD'), 'Mon-YY') as Stripe_month,
                 case when A.description like '%retry%' or A.description like '%reattempt%' and  A.reporting_category
                                                                 in ('charge') or  (A.description like '%-%' and A.reporting_category in ('charge','refund')) then 1 else 0 end as Invoices_retry,
                case when (length(B.invoice_id::text)<=4 and length(B.invoice_id::text)>0 and  A.reporting_category in ('charge','refund'))  then 1 else 0 end as net_suite,
        A.Gross,
         A.net,
        A.customer_facing_amount
 from "22_audit_stripe_transaction_history_recon_2022_01_2022_12_no_errors" A --Change the table
left join (SELECT  description,reporting_Category,REGEXP_REPLACE(description, '[^0-9]+', '') AS invoice_id,
               customer_facing_amount,gross
 from "22_audit_stripe_transaction_history_recon_2022_01_2022_12_no_errors" --Change the table
 where reporting_category in ('charge', 'refund', 'charge_failure')
 ) B
 on A.description = B.description
 --where A.reporting_category in ('charge', 'refund', 'charge_failure')
 union
Select   distinct A.balance_transaction_id,A.description,A.reporting_Category,created_utc,available_on_utc,B.invoice_id,
                   TO_CHAR(TO_DATE(created_utc, 'YYYY-MM-DD'), 'Mon-YY') as Stripe_month,
                 case when A.description like '%retry%' and  A.reporting_category
                                                                 in ('charge') or  (A.description   like '%-%' and A.reporting_category in ('charge','refund')) then 1 else 0 end as Invoices_retry,
                case when (length(B.invoice_id::text)<=4 and length(B.invoice_id::text)>0 and  A.reporting_category in ('charge','refund'))  then 1 else 0 end as net_suite,
        A.Gross,
         A.net,
        A.customer_facing_amount
 from "22_audit_stripe_transaction_history_recon_2022_01_2022_12_no_errors" A --Change the table
left join (SELECT  description,reporting_Category,REGEXP_REPLACE(description, '[^0-9]+', '') AS invoice_id,
               customer_facing_amount,gross
 from "22_audit_stripe_transaction_history_recon_2023_01_2023_06_no_errors" --Change the table
 where reporting_category in ('charge', 'refund', 'charge_failure')
 and file_name in ('Itemized_balance_change_from_activity_USD_2023-01-01_to_2023-01-31.csv')
 ) B
 on A.description = B.description
 --where A.reporting_category in ('charge', 'refund', 'charge_failure')
    where file_name in ('Itemized_balance_change_from_activity_USD_2023-01-01_to_2023-01-31.csv')
union
    Select   distinct A.balance_transaction_id,A.description,A.reporting_Category,created_utc,available_on_utc,B.invoice_id,
                   TO_CHAR(TO_DATE(created_utc, 'YYYY-MM-DD'), 'Mon-YY') as Stripe_month,
                 case when A.description like '%retry%' or A.description like '%reattempt%' and  A.reporting_category
                                                                 in ('charge') or  (A.description like '%-%' and A.reporting_category in ('charge','refund')) then 1 else 0 end as Invoices_retry,
                case when (length(B.invoice_id::text)<=4 and length(B.invoice_id::text)>0 and  A.reporting_category in ('charge','refund'))  then 1 else 0 end as net_suite,
        A.Gross,
         A.net,
        A.customer_facing_amount
 from "22_audit_stripe_transaction_history_recon_2021_10_2021_12_no_errors" A --Change the table
left join (SELECT  description,reporting_Category,REGEXP_REPLACE(description, '[^0-9]+', '') AS invoice_id,
               customer_facing_amount,gross
 from "22_audit_stripe_transaction_history_recon_2022_01_2022_12_no_errors" --Change the table
 where reporting_category in ('charge', 'refund', 'charge_failure')
 ) B
 on A.description = B.description;

--Prod Invoices---
drop table if exists  Prod_Invoiceitem;
create temp table  Prod_Invoiceitem as
Select distinct invoice_id,paid,sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(converted_invcharge)::numeric(15,2) as converted_invcharge,sum(converted_invrefund)::numeric(15,2) as converted_invrefund from
 (
Select distinct invoice_id,paid,invi.object_updated,
                max(to_char( CASE
                       WHEN invi.amount != 0
                           OR invi.amount IS NOT NULL THEN invi.object_updated
                       ELSE NULL
                       END,'YYYY-MM-DD HH24:MI')) as invoice_date,
    sum(
                   CASE
                       WHEN invi.object_purpose != 'REFUND'
                           AND (
                                        invi.amount != 0
                                    OR invi.amount IS NOT NULL
                                ) THEN invi.amount
                       ELSE NULL
                       END
               ) AS invcharge,
    sum(
                   CASE
                       WHEN invi.object_purpose = 'REFUND'
                           AND (
                                        invi.amount != 0
                                    OR invi.amount IS NOT NULL
                                ) THEN (-1 * invi.amount)
                       ELSE NULL
                       END
               ) AS invrefund,
     sum(
                   CASE
                       WHEN invi.object_purpose != 'REFUND'
                           AND (
                                        invi.amount != 0
                                    OR invi.amount IS NOT NULL
                                ) THEN (invi.amount)/MC.rate_type
                       ELSE NULL
                       END
               ) AS converted_invcharge,
    sum(
                   CASE
                       WHEN invi.object_purpose = 'REFUND'
                           AND (
                                        invi.amount != 0
                                    OR invi.amount IS NOT NULL
                                ) THEN (-1 * invi.amount)/MC.rate_type
                       ELSE NULL
                       END
               ) AS converted_invrefund
from audit_data_se01_20230327.api_invoiceitem invi
    left join audit_data_se01_20230327.api_invoice on invi.invoice_id = api_invoice.id
left join (Select * from api_currency) CUR on invi.currency_id=CUR.id
left join (Select distinct "Currency"::varchar(5) as ISO_Currnecy,Date::date as Currency_date,"Rate"::numeric(15,2) as rate_type
           from "22_audit_stripe_currency_2021_01_01_2023_07_12") MC
   on  CUR.iso=MC.ISO_Currnecy and invi.object_updated::date=MC.Currency_date::date
where  invi.object_updated>= (Select query_start_timestamp_filter from console_query_variables)
and invi.object_updated< (Select query_end_timestamp_filter from console_query_variables)
  and
        (
        invi.amount != 0
       OR invi.amount IS NOT NULL
       )
and invoice_id is not null
group by 1,2,3)A
where paid>=(Select query_start_timestamp_filter from console_query_variables) --Change 1
and paid <(Select query_end_timestamp_filter from console_query_variables)--Change 2
group by 1,2;

drop table if exists Billing_payment_info;
create temp table Billing_payment_info as
Select distinct invoice_id,
 object_created,
   object_updated,
   row_number () over (partition by  invoice_id order by object_created desc) as billing_row,
   sum(amount) as amount,
   sum(converted_amount)::numeric(15,2) as Amount_Converted
  from (Select distinct invoice_id,payment_method_id,
  currency_id,
 object_created,
  object_updated,
   amount,
  amount / rate_type as converted_amount
 from audit_data_se01_20230327.billing_payment BP
  left join (Select * from api_currency) CUR on BP.currency_id=CUR.id
left join (Select distinct "Currency"::varchar(5) as ISO_Currnecy,Date::date as Currency_date,"Rate"::numeric(15,2) as rate_type
           from "22_audit_stripe_currency_2021_01_01_2023_07_12") MC
   on  CUR.iso=MC.ISO_Currnecy and BP.object_updated::date=MC.Currency_date::date
 where object_created >= (Select query_start_timestamp_filter from console_query_variables)
 and object_created < (Select query_end_timestamp_filter from console_query_variables)
 and payment_method_id not in (3)
  )A
group by 1, 2, 3;

drop table if exists Invoice_check;
create temp table Invoice_check as
    Select distinct id,paid as invoice_paid,object_created as invoice_created from api_invoice
    where id in (Select distinct invoice_id from Stripe_data where net_suite=0 and Invoices_retry=0 and reporting_category in ('charge','refund'))
;
drop table if exists Billing_check;
create temp table Billing_check as
    Select distinct invoice_id,object_created as billing_created,amount  from billing_payment
    where id in (Select distinct invoice_id from Stripe_data where net_suite=0 and Invoices_retry=0 and reporting_category in ('charge','refund'))
;
-- _____ _   _ ___________  _____ _   _ _   _______  _____
--|  _  | | | |_   _| ___ \|  _  | | | | \ | |  _  \/  ___|
--| | | | | | | | | | |_/ /| | | | | | |  \| | | | |\ `--.
--| | | | | | | | | | ___ \| | | | | | | . ` | | | | `--. \
--\ \_/ / |_| | | | | |_/ /\ \_/ / |_| | |\  | |/ / /\__/ /
-- \___/ \___/  \_/ \____/  \___/ \___/\_| \_/___/  \____/

--------------------------------------------
------PROD<--USPS OUTBOUNDS-----------------
--------------------------------------------

------------------------------
-- PROD OUTBOUND QUERY 20230614 JAN-DEC INCL ESI MATCHED TO USPS BY S3 DATE
------------------------------
SET TIMEZONE TO 'US/PACIFIC';
DROP TABLE IF EXISTS EPS_ESI_2022_01_2022_12;
create temp table EPS_ESI_2022_01_2022_12 as
--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              'OUTBOUND'
              --'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --OUTBOUND
        (SELECT
          -- FROM USPS QUERY
          master_account_type,
          mail_class_id,
          mail_class_name,
          national_international_svc,
          trx_month,
          trx_date,
          pic,
          COUNT(DISTINCT pic) pic_dcount,
          COUNT(pic) pic_count,
          SUM(usps_postage_cost) usps_postage_cost
            FROM
                (
                SELECT
                  CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC Shippo Managed MIDs v1'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                                     master_account_type,
                  out.c3_mail_class                                              mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                                     mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                                     national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN out.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN out.h1_mailing_month
                      END AS                                                     trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN out.s3_based_transaction_date
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN out.avg_h1_c6_mailing_date_time
                      END AS trx_date,
                  out.c2_pic pic,
                  out.grouping_id grp_id,
                  out.d1_c29_usps_calculated_manifest_postage usps_postage_cost
                FROM
                    (
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2021"
                    UNION ALL
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2022"
                    UNION ALL
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2023_01_2023_05"
                    ) out
                        -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                        LEFT JOIN
                            (
                             SELECT *
                             FROM audit_data.bcg_ach_mapping_detail
                             WHERE
                                 (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                        AND
                                        (eps_id IS NULL))
                                   OR
                                  ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                        AND
                                        (eps_id IS NOT NULL)))
                                     -- Removes returns as returns are already linked to ach_id
                            ) AS bamd ON out.c31_caps_transaction_id = bamd.eps_id
                        LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(out.c3_mail_class) = UPPER(usl.usps_svc_lvl_id)
                WHERE (
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                         cast(out.s3_based_transaction_date as date)
                             >=
                         DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                 (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                           OR
                        ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                         cast(out.avg_h1_c6_mailing_date_time as date)
                             >=
                         DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                 (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                           )
                       AND
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                         cast(out.s3_based_transaction_date as date)
                             <
                         DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                 (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                           OR
                        ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                         cast(out.avg_h1_c6_mailing_date_time as date)
                             <
                         DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                 (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                           )
                    )
                    AND (out.c31_caps_transaction_id IS NOT NULL OR out.c31_caps_transaction_id NOT IN ('0'))
                GROUP BY master_account_type,
                        mail_class_id,
                        mail_class_name,
                        national_international_svc,
                        grp_id,
                        trx_month,
                        trx_date,
                        pic,
                        usps_postage_cost
                ORDER BY pic desc
                --LIMIT 1000
                ) usps
        GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
        --HAVING COUNT(pic)>1
        ORDER BY pic desc
        --LIMIT 1000
       )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;
;
------------------------------
-- PROD OUTBOUND QUERY 20230614 JAN-DEC CEC ONLY MATCHED TO USPS BY S3 DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
SET TIMEZONE TO 'US/PACIFIC';
DROP TABLE IF EXISTS CEC_2022_01_2022_12;
create temp table CEC_2022_01_2022_12 as

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              'OUTBOUND'
              --'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --OUTBOUND
        (SELECT
          -- FROM USPS QUERY
          master_account_type,
          mail_class_id,
          mail_class_name,
          national_international_svc,
          trx_month,
          trx_date,
          pic,
          COUNT(DISTINCT pic) pic_dcount,
          COUNT(pic) pic_count,
          SUM(usps_postage_cost) usps_postage_cost
            FROM
                (
                SELECT
                  CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC Shippo Managed MIDs v1'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                                     master_account_type,
                  out.c3_mail_class                                              mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                                     mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                                     national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN out.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN out.h1_mailing_month
                      END AS                                                     trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN out.s3_based_transaction_date
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN out.avg_h1_c6_mailing_date_time
                      END AS trx_date,
                  out.c2_pic pic,
                  out.grouping_id grp_id,
                  out.d1_c29_usps_calculated_manifest_postage usps_postage_cost
                FROM
                    (
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2021"
                    UNION ALL
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2022"
                    UNION ALL
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2023_01_2023_05"
                    ) out
                        -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                        LEFT JOIN
                            (
                             SELECT *
                             FROM audit_data.bcg_ach_mapping_detail
                             WHERE
                                 (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                        AND
                                        (eps_id IS NULL))
                                   OR
                                  ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                        AND
                                        (eps_id IS NOT NULL)))
                                     -- Removes returns as returns are already linked to ach_id
                            ) AS bamd ON out.c31_caps_transaction_id = bamd.eps_id
                        LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(out.c3_mail_class) = UPPER(usl.usps_svc_lvl_id)
                WHERE (
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                         cast(out.s3_based_transaction_date as date)
                             >=
                         DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                 (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                           OR
                        ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                         cast(out.avg_h1_c6_mailing_date_time as date)
                             >=
                         DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                 (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                           )
                       AND
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                         cast(out.s3_based_transaction_date as date)
                             <
                         DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                 (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                           OR
                        ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                         cast(out.avg_h1_c6_mailing_date_time as date)
                             <
                         DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                 (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                           )
                    )
                    AND (out.c31_caps_transaction_id IS NOT NULL OR out.c31_caps_transaction_id NOT IN ('0'))
                GROUP BY master_account_type,
                        mail_class_id,
                        mail_class_name,
                        national_international_svc,
                        grp_id,
                        trx_month,
                        trx_date,
                        pic,
                        usps_postage_cost
                ORDER BY pic desc
                --LIMIT 1000
                ) usps
        GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
        --HAVING COUNT(pic)>1
        ORDER BY pic desc
        --LIMIT 1000
       )


--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;
;
------------------------------
-- PROD OUTBOUND QUERY 20230614 JAN-DEC PARTIAL CEC MATCHED TO USPS BY S3 DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
SET TIMEZONE TO 'US/PACIFIC';
DROP TABLE IF EXISTS PARTIAL_CEC_2022_01_2022_12;
create temp table PARTIAL_CEC_2022_01_2022_12 as

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              'OUTBOUND'
              --'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --OUTBOUND
        (SELECT
          -- FROM USPS QUERY
          master_account_type,
          mail_class_id,
          mail_class_name,
          national_international_svc,
          trx_month,
          trx_date,
          pic,
          COUNT(DISTINCT pic) pic_dcount,
          COUNT(pic) pic_count,
          SUM(usps_postage_cost) usps_postage_cost
            FROM
                (
                SELECT
                  CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC Shippo Managed MIDs v1'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                                     master_account_type,
                  out.c3_mail_class                                              mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                                     mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                                     national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN out.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN out.h1_mailing_month
                      END AS                                                     trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN out.s3_based_transaction_date
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN out.avg_h1_c6_mailing_date_time
                      END AS trx_date,
                  out.c2_pic pic,
                  out.grouping_id grp_id,
                  out.d1_c29_usps_calculated_manifest_postage usps_postage_cost
                FROM
                    (
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2021"
                    UNION ALL
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2022"
                    UNION ALL
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2023_01_2023_05"
                    ) out
                        -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                        LEFT JOIN
                            (
                             SELECT *
                             FROM audit_data.bcg_ach_mapping_detail
                             WHERE
                                 (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                        AND
                                        (eps_id IS NULL))
                                   OR
                                  ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                        AND
                                        (eps_id IS NOT NULL)))
                                     -- Removes returns as returns are already linked to ach_id
                            ) AS bamd ON out.c31_caps_transaction_id = bamd.eps_id
                        LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(out.c3_mail_class) = UPPER(usl.usps_svc_lvl_id)
                WHERE (
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                         cast(out.s3_based_transaction_date as date)
                             >=
                         DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                 (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                           OR
                        ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                         cast(out.avg_h1_c6_mailing_date_time as date)
                             >=
                         DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                 (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                           )
                       AND
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                         cast(out.s3_based_transaction_date as date)
                             <
                         DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                 (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                           OR
                        ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                         cast(out.avg_h1_c6_mailing_date_time as date)
                             <
                         DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                 (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                           )
                    )
                    AND (out.c31_caps_transaction_id IS NOT NULL OR out.c31_caps_transaction_id NOT IN ('0'))
                GROUP BY master_account_type,
                        mail_class_id,
                        mail_class_name,
                        national_international_svc,
                        grp_id,
                        trx_month,
                        trx_date,
                        pic,
                        usps_postage_cost
                ORDER BY pic desc
                --LIMIT 1000
                ) usps
        GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
        --HAVING COUNT(pic)>1
        ORDER BY pic desc
        --LIMIT 1000
       )


--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
;
------------------------------
-- PROD OUTBOUND QUERY 20230614 JAN-DEC CEC INTERNATIONAL MATCHED TO USPS BY S3 DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
SET TIMEZONE TO 'US/PACIFIC';
DROP TABLE IF EXISTS INTERNATIONAL_CEC_2022_01_2022_12;
create temp table INTERNATIONAL_CEC_2022_01_2022_12 as

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              'OUTBOUND'
              --'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --OUTBOUND
        (SELECT
          -- FROM USPS QUERY
          master_account_type,
          mail_class_id,
          mail_class_name,
          national_international_svc,
          trx_month,
          trx_date,
          pic,
          COUNT(DISTINCT pic) pic_dcount,
          COUNT(pic) pic_count,
          SUM(usps_postage_cost) usps_postage_cost
            FROM
                (
                SELECT
                  CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC Shippo Managed MIDs v1'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                                     master_account_type,
                  out.c3_mail_class                                              mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                                     mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                                     national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN out.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN out.h1_mailing_month
                      END AS                                                     trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN out.s3_based_transaction_date
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN out.avg_h1_c6_mailing_date_time
                      END AS trx_date,
                  out.c2_pic pic,
                  out.grouping_id grp_id,
                  out.d1_c29_usps_calculated_manifest_postage usps_postage_cost
                FROM
                    (
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2021"
                    UNION ALL
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2022"
                    UNION ALL
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2023_01_2023_05"
                    ) out
                        -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                        LEFT JOIN
                            (
                             SELECT *
                             FROM audit_data.bcg_ach_mapping_detail
                             WHERE
                                 (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                        AND
                                        (eps_id IS NULL))
                                   OR
                                  ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                        AND
                                        (eps_id IS NOT NULL)))
                                     -- Removes returns as returns are already linked to ach_id
                            ) AS bamd ON out.c31_caps_transaction_id = bamd.eps_id
                        LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(out.c3_mail_class) = UPPER(usl.usps_svc_lvl_id)
                WHERE (
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                         cast(out.s3_based_transaction_date as date)
                             >=
                         DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                 (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                           OR
                        ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                         cast(out.avg_h1_c6_mailing_date_time as date)
                             >=
                         DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                 (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                           )
                       AND
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                         cast(out.s3_based_transaction_date as date)
                             <
                         DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                 (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                           OR
                        ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                         cast(out.avg_h1_c6_mailing_date_time as date)
                             <
                         DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                 (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                           )
                    )
                    AND (out.c31_caps_transaction_id IS NOT NULL OR out.c31_caps_transaction_id NOT IN ('0'))
                GROUP BY master_account_type,
                        mail_class_id,
                        mail_class_name,
                        national_international_svc,
                        grp_id,
                        trx_month,
                        trx_date,
                        pic,
                        usps_postage_cost
                ORDER BY pic desc
                --LIMIT 1000
                ) usps
        GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
        --HAVING COUNT(pic)>1
        ORDER BY pic desc
        --LIMIT 1000
       )


--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
;
--;
------------------------------
-- PROD OUTBOUND QUERY 20230614 JAN-DEC ZARA ONLY MATCHED TO USPS BY S3 DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
SET TIMEZONE TO 'US/PACIFIC';
DROP TABLE IF EXISTS ZARA_2022_01_2022_12;
create temp table ZARA_2022_01_2022_12 as


--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              --'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              'OUTBOUND'
              --'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --OUTBOUND
        (SELECT
          -- FROM USPS QUERY
          master_account_type,
          mail_class_id,
          mail_class_name,
          national_international_svc,
          trx_month,
          trx_date,
          pic,
          COUNT(DISTINCT pic) pic_dcount,
          COUNT(pic) pic_count,
          SUM(usps_postage_cost) usps_postage_cost
            FROM
                (
                SELECT
                  CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC Shippo Managed MIDs v1'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                                     master_account_type,
                  out.c3_mail_class                                              mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                                     mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                                     national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN out.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN out.h1_mailing_month
                      END AS                                                     trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN out.s3_based_transaction_date
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN out.avg_h1_c6_mailing_date_time
                      END AS trx_date,
                  out.c2_pic pic,
                  out.grouping_id grp_id,
                  out.d1_c29_usps_calculated_manifest_postage usps_postage_cost
                FROM
                    (
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2021"
                    UNION ALL
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2022"
                    UNION ALL
                    SELECT
                        CAST("compiled_file" AS VARCHAR),
                        CAST("c0_source_file" AS VARCHAR),
                        CAST("c1_record_type" AS VARCHAR),
                        CAST("c2_pic" AS VARCHAR),
                        CAST("c3_mail_class" AS VARCHAR),
                        CAST("c4_processing_category" AS VARCHAR),
                        CAST("c5_weight" AS VARCHAR),
                        CAST("c6_dim_weight" AS VARCHAR),
                        CAST("c7_length" AS VARCHAR),
                        CAST("c8_width" AS VARCHAR),
                        CAST("c9_height" AS VARCHAR),
                        CAST("c10_package_destination_zip" AS VARCHAR),
                        CAST("c11_destination_zip4" AS VARCHAR),
                        CAST("c12_destination_rate_indicator" AS VARCHAR),
                        CAST("c13_rate_indicator" AS VARCHAR),
                        CAST("c14_zone" AS VARCHAR),
                        CAST("c15_postal_routing_barcode" AS VARCHAR),
                        CAST("c16_xtra_svc_code_1st_svc" AS VARCHAR),
                        CAST("c17_fee_for_xtra_svc_code_1st" AS VARCHAR),
                        CAST("c18_xtra_svc_code_2nd_svc" AS VARCHAR),
                        CAST("c19_fee_for_xtra_svc_code_2nd" AS VARCHAR),
                        CAST("c20_xtra_svc_code_3rd_svc" AS VARCHAR),
                        CAST("c21_fee_for_xtra_svc_code_3rd" AS VARCHAR),
                        CAST("c22_discount_type" AS VARCHAR),
                        CAST("c23_discount_amount" AS VARCHAR),
                        CAST("c24_surcharge_type" AS VARCHAR),
                        CAST("c25_surcharge_amount" AS VARCHAR),
                        CAST("c26_customer_reference_number" AS VARCHAR),
                        CAST("c27_price_type" AS VARCHAR),
                        CAST("c28_mailer_postage" AS VARCHAR),
                        CAST("c29_usps_calculated_manifest_postage" AS VARCHAR),
                        CAST("c30_payment_status" AS VARCHAR),
                        CAST("c31_caps_transaction_id" AS VARCHAR),
                        CAST("d1_c29_usps_calculated_manifest_postage" AS REAL),
                        CAST("min_h1_c6_mailing_date_time" AS DATE),
                        CAST("max_h1_c6_mailing_date_time" AS DATE),
                        CAST("avg_h1_c6_mailing_date_time" AS DATE),
                        CAST("min_h1_c7_processing_date_time" AS DATE),
                        CAST("max_h1_c7_processing_date_time" AS DATE),
                        CAST("avg_h1_c7_processing_date_time" AS DATE),
                        CAST("h1_mailing_month" AS VARCHAR),
                        CAST("h1_processing_month" AS VARCHAR),
                        CAST("s3_based_transaction_date" AS DATE),
                        CAST("s3_based_transaction_month" AS VARCHAR),
                        CAST("grouping_id" AS VARCHAR)
                        FROM audit_data."22_audit_s3_outbounds_merged_2023_01_2023_05"
                    ) out
                        -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                        LEFT JOIN
                            (
                             SELECT *
                             FROM audit_data.bcg_ach_mapping_detail
                             WHERE
                                 (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                        AND
                                        (eps_id IS NULL))
                                   OR
                                  ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                        AND
                                        (eps_id IS NOT NULL)))
                                     -- Removes returns as returns are already linked to ach_id
                            ) AS bamd ON out.c31_caps_transaction_id = bamd.eps_id
                        LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(out.c3_mail_class) = UPPER(usl.usps_svc_lvl_id)
                WHERE (
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                         cast(out.s3_based_transaction_date as date)
                             >=
                         DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                 (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                           OR
                        ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                         cast(out.avg_h1_c6_mailing_date_time as date)
                             >=
                         DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                 (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                           )
                       AND
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                         cast(out.s3_based_transaction_date as date)
                             <
                         DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                 (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                           OR
                        ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                         cast(out.avg_h1_c6_mailing_date_time as date)
                             <
                         DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                 (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                           )
                    )
                    AND (out.c31_caps_transaction_id IS NOT NULL OR out.c31_caps_transaction_id NOT IN ('0'))
                GROUP BY master_account_type,
                        mail_class_id,
                        mail_class_name,
                        national_international_svc,
                        grp_id,
                        trx_month,
                        trx_date,
                        pic,
                        usps_postage_cost
                ORDER BY pic desc
                --LIMIT 1000
                ) usps
        GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
        --HAVING COUNT(pic)>1
        ORDER BY pic desc
        --LIMIT 1000
       )


--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;
;




--______ _____ _____ _   _______ _   _  _____
--| ___ \  ___|_   _| | | | ___ \ \ | |/  ___|
--| |_/ / |__   | | | | | | |_/ /  \| |\ `--.
--|    /|  __|  | | | | | |    /| . ` | `--. \
--| |\ \| |___  | | | |_| | |\ \| |\  |/\__/ /
--\_| \_\____/  \_/  \___/\_| \_\_| \_/\____/


--------------------------------------------
------PROD<--USPS RETURNS-------------------
--------------------------------------------

------------------------------
-- PROD RETURNS QUERY 20230614 JAN-DEC INCL ESI MATCHED TO USPS BY TRANSACTION DATE
------------------------------
SET TIMEZONE TO 'US/PACIFIC';
drop table IF EXISTS EPS_ESI_2022_01_2022_12_RETRUNS;
create temp table EPS_ESI_2022_01_2022_12_RETRUNS as

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              'RETURN'
              --'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              --'S3 DATE'
              --'MAILING DATE'
              'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              --'REFUND'
              'RETURN'
                 AS trx_type
          ),
     usps_detail AS --RETURN
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
            (
             SELECT
                 CASE WHEN
                     bamd.eps_account IN ('1000039729')
                     THEN 'Shippo Outbounds'
                 WHEN
                     bamd.eps_account IN ('1000039246')
                     THEN 'ESI Outbound'
                 WHEN
                     bamd.eps_account IN ('1000026687')
                     THEN 'Shippo Returns'
                 WHEN
                     bamd.eps_account IN ('1000052234')
                     THEN 'CEC Shippo Managed MIDs v2'
                 WHEN
                     bamd.eps_account IN ('1000051478')
                     THEN 'CEC Shippo Managed MIDs v1'
                 ELSE 'POSSIBLY ZARA'
                 END AS                    master_account_type,
                 rtn."mail class"              mail_class_id,
                 CASE WHEN
                     usl.usps_svc_lvl_name IS NOT NULL
                     THEN usl.usps_svc_lvl_name
                 ELSE 'UNKNOWN'
                 END AS                    mail_class_name,
                 CASE WHEN
                             usl.usps_svc_lvl_name ILIKE '%global%'
                         OR
                             usl.usps_svc_lvl_name ILIKE '%international%'
                     THEN 'INTERNATIONAL'
                 ELSE 'NATIONAL'
                 END AS                    national_international_svc,
                 CASE WHEN
                    (SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                    THEN rtn.transaction_month
                 WHEN
                    (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                    THEN rtn.s3_based_transaction_month
                 END AS trx_month,
                 CASE WHEN
                         (SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                     THEN cast(rtn.transaction_date as date)
                 WHEN
                         (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                     THEN cast(rtn.s3_based_transaction_date as date)
                 END AS                    trx_date,
                 rtn.pic,
                 rtn."grouping_id" grp_id,
                 rtn."transaction amount" usps_postage_cost
             FROM
                 (
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_returns_merged_2021"
                    UNION ALL
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_returns_merged_2022"
                    UNION ALL
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                     FROM audit_data."22_audit_s3_returns_merged_2023_01_2023_05"
                 --LIMIT 1000
                 ) rtn

                    -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                    LEFT JOIN
                        (
                         SELECT *
                         FROM audit_data.bcg_ach_mapping_detail
                         WHERE
                             (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                    AND
                                    (eps_id IS NULL))
                               OR
                              ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                    AND
                                    (eps_id IS NOT NULL)))
                                 -- Removes returns as returns are already linked to ach_id
                        ) AS bamd ON rtn."ach withdrawal id" = bamd.ach_id
                    LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(rtn."mail class") = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                      (((SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                          AND
                        cast(rtn.transaction_date as date)
                            >=
                        DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                          OR
                       ((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                        cast(rtn.s3_based_transaction_date as date)
                            >=
                        DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                          )
                      AND
                      (((SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                          AND
                        cast(rtn.transaction_date as date)
                            <
                        DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                          OR
                       ((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                        cast(rtn.s3_based_transaction_date as date)
                            <
                        DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                          )
                  )
                AND (rtn."ach withdrawal id" IS NOT NULL OR rtn."ach withdrawal id" NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
             --HAVING count(pic)>1
             ORDER BY pic desc
             --LIMIT 1000
            ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;
;

select * from EPS_ESI_2022_01_2022_12_RETRUNS limit 100;


------------------------------
-- PROD RETURNS QUERY 20230614 JAN-DEC CEC ONLY MATCHED TO USPS BY TRANSACTION DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
SET TIMEZONE TO 'US/PACIFIC';
drop table IF EXISTS CEC_2022_01_2022_12_Returns;
create temp table CEC_2022_01_2022_12_Returns as

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              'RETURN'
              --'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              --'S3 DATE'
              --'MAILING DATE'
              'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              --'REFUND'
              'RETURN'
                 AS trx_type
          ),
     usps_detail AS --RETURN
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
            (
             SELECT
                 CASE WHEN
                     bamd.eps_account IN ('1000039729')
                     THEN 'Shippo Outbounds'
                 WHEN
                     bamd.eps_account IN ('1000039246')
                     THEN 'ESI Outbound'
                 WHEN
                     bamd.eps_account IN ('1000026687')
                     THEN 'Shippo Returns'
                 WHEN
                     bamd.eps_account IN ('1000052234')
                     THEN 'CEC Shippo Managed MIDs v2'
                 WHEN
                     bamd.eps_account IN ('1000051478')
                     THEN 'CEC Shippo Managed MIDs v1'
                 ELSE 'POSSIBLY ZARA'
                 END AS                    master_account_type,
                 rtn."mail class"              mail_class_id,
                 CASE WHEN
                     usl.usps_svc_lvl_name IS NOT NULL
                     THEN usl.usps_svc_lvl_name
                 ELSE 'UNKNOWN'
                 END AS                    mail_class_name,
                 CASE WHEN
                             usl.usps_svc_lvl_name ILIKE '%global%'
                         OR
                             usl.usps_svc_lvl_name ILIKE '%international%'
                     THEN 'INTERNATIONAL'
                 ELSE 'NATIONAL'
                 END AS                    national_international_svc,
                 CASE WHEN
                    (SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                    THEN rtn.transaction_month
                 WHEN
                    (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                    THEN rtn.s3_based_transaction_month
                 END AS trx_month,
                 CASE WHEN
                         (SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                     THEN cast(rtn.transaction_date as date)
                 WHEN
                         (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                     THEN cast(rtn.s3_based_transaction_date as date)
                 END AS                    trx_date,
                 rtn.pic,
                 rtn."grouping_id" grp_id,
                 rtn."transaction amount" usps_postage_cost
             FROM
                 (
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_returns_merged_2021"
                    UNION ALL
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_returns_merged_2022"
                    UNION ALL
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                     FROM audit_data."22_audit_s3_returns_merged_2023_01_2023_05"
                 --LIMIT 1000
                 ) rtn

                    -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                    LEFT JOIN
                        (
                         SELECT *
                         FROM audit_data.bcg_ach_mapping_detail
                         WHERE
                             (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                    AND
                                    (eps_id IS NULL))
                               OR
                              ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                    AND
                                    (eps_id IS NOT NULL)))
                                 -- Removes returns as returns are already linked to ach_id
                        ) AS bamd ON rtn."ach withdrawal id" = bamd.ach_id
                    LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(rtn."mail class") = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                      (((SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                          AND
                        cast(rtn.transaction_date as date)
                            >=
                        DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                          OR
                       ((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                        cast(rtn.s3_based_transaction_date as date)
                            >=
                        DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                          )
                      AND
                      (((SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                          AND
                        cast(rtn.transaction_date as date)
                            <
                        DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                          OR
                       ((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                        cast(rtn.s3_based_transaction_date as date)
                            <
                        DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                          )
                  )
                AND (rtn."ach withdrawal id" IS NOT NULL OR rtn."ach withdrawal id" NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
             --HAVING count(pic)>1
             ORDER BY pic desc
             --LIMIT 1000
            ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;
;


------------------------------
-- PROD RETURNS QUERY 20230614 JAN-DEC PARTIAL CEC MATCHED TO USPS BY TRANSACTION DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
SET TIMEZONE TO 'US/PACIFIC';
drop table IF EXISTS PARTIAL_CEC_2022_01_2022_12_Returns;
create temp table PARTIAL_CEC_2022_01_2022_12_Returns as

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              'RETURN'
              --'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              --'S3 DATE'
              --'MAILING DATE'
              'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              --'REFUND'
              'RETURN'
                 AS trx_type
          ),
     usps_detail AS --RETURN
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
            (
             SELECT
                 CASE WHEN
                     bamd.eps_account IN ('1000039729')
                     THEN 'Shippo Outbounds'
                 WHEN
                     bamd.eps_account IN ('1000039246')
                     THEN 'ESI Outbound'
                 WHEN
                     bamd.eps_account IN ('1000026687')
                     THEN 'Shippo Returns'
                 WHEN
                     bamd.eps_account IN ('1000052234')
                     THEN 'CEC Shippo Managed MIDs v2'
                 WHEN
                     bamd.eps_account IN ('1000051478')
                     THEN 'CEC Shippo Managed MIDs v1'
                 ELSE 'POSSIBLY ZARA'
                 END AS                    master_account_type,
                 rtn."mail class"              mail_class_id,
                 CASE WHEN
                     usl.usps_svc_lvl_name IS NOT NULL
                     THEN usl.usps_svc_lvl_name
                 ELSE 'UNKNOWN'
                 END AS                    mail_class_name,
                 CASE WHEN
                             usl.usps_svc_lvl_name ILIKE '%global%'
                         OR
                             usl.usps_svc_lvl_name ILIKE '%international%'
                     THEN 'INTERNATIONAL'
                 ELSE 'NATIONAL'
                 END AS                    national_international_svc,
                 CASE WHEN
                    (SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                    THEN rtn.transaction_month
                 WHEN
                    (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                    THEN rtn.s3_based_transaction_month
                 END AS trx_month,
                 CASE WHEN
                         (SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                     THEN cast(rtn.transaction_date as date)
                 WHEN
                         (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                     THEN cast(rtn.s3_based_transaction_date as date)
                 END AS                    trx_date,
                 rtn.pic,
                 rtn."grouping_id" grp_id,
                 rtn."transaction amount" usps_postage_cost
             FROM
                 (
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_returns_merged_2021"
                    UNION ALL
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_returns_merged_2022"
                    UNION ALL
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                     FROM audit_data."22_audit_s3_returns_merged_2023_01_2023_05"
                 --LIMIT 1000
                 ) rtn

                    -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                    LEFT JOIN
                        (
                         SELECT *
                         FROM audit_data.bcg_ach_mapping_detail
                         WHERE
                             (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                    AND
                                    (eps_id IS NULL))
                               OR
                              ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                    AND
                                    (eps_id IS NOT NULL)))
                                 -- Removes returns as returns are already linked to ach_id
                        ) AS bamd ON rtn."ach withdrawal id" = bamd.ach_id
                    LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(rtn."mail class") = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                      (((SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                          AND
                        cast(rtn.transaction_date as date)
                            >=
                        DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                          OR
                       ((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                        cast(rtn.s3_based_transaction_date as date)
                            >=
                        DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                          )
                      AND
                      (((SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                          AND
                        cast(rtn.transaction_date as date)
                            <
                        DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                          OR
                       ((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                        cast(rtn.s3_based_transaction_date as date)
                            <
                        DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                          )
                  )
                AND (rtn."ach withdrawal id" IS NOT NULL OR rtn."ach withdrawal id" NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
             --HAVING count(pic)>1
             ORDER BY pic desc
             --LIMIT 1000
            ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;

;


------------------------------
-- PROD RETURNS QUERY 20230614 JAN-DEC CEC INTERNATIONAL MATCHED TO USPS BY TRANSACTION DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
drop table IF EXISTS INTERNATIONAL_CEC_2022_01_2022_12_returns;
create temp table INTERNATIONAL_CEC_2022_01_2022_12_returns as

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              'RETURN'
              --'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              --'S3 DATE'
              --'MAILING DATE'
              'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              --'REFUND'
              'RETURN'
                 AS trx_type
          ),
     usps_detail AS --RETURN
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
            (
             SELECT
                 CASE WHEN
                     bamd.eps_account IN ('1000039729')
                     THEN 'Shippo Outbounds'
                 WHEN
                     bamd.eps_account IN ('1000039246')
                     THEN 'ESI Outbound'
                 WHEN
                     bamd.eps_account IN ('1000026687')
                     THEN 'Shippo Returns'
                 WHEN
                     bamd.eps_account IN ('1000052234')
                     THEN 'CEC Shippo Managed MIDs v2'
                 WHEN
                     bamd.eps_account IN ('1000051478')
                     THEN 'CEC Shippo Managed MIDs v1'
                 ELSE 'POSSIBLY ZARA'
                 END AS                    master_account_type,
                 rtn."mail class"              mail_class_id,
                 CASE WHEN
                     usl.usps_svc_lvl_name IS NOT NULL
                     THEN usl.usps_svc_lvl_name
                 ELSE 'UNKNOWN'
                 END AS                    mail_class_name,
                 CASE WHEN
                             usl.usps_svc_lvl_name ILIKE '%global%'
                         OR
                             usl.usps_svc_lvl_name ILIKE '%international%'
                     THEN 'INTERNATIONAL'
                 ELSE 'NATIONAL'
                 END AS                    national_international_svc,
                 CASE WHEN
                    (SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                    THEN rtn.transaction_month
                 WHEN
                    (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                    THEN rtn.s3_based_transaction_month
                 END AS trx_month,
                 CASE WHEN
                         (SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                     THEN cast(rtn.transaction_date as date)
                 WHEN
                         (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                     THEN cast(rtn.s3_based_transaction_date as date)
                 END AS                    trx_date,
                 rtn.pic,
                 rtn."grouping_id" grp_id,
                 rtn."transaction amount" usps_postage_cost
             FROM
                 (
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_returns_merged_2021"
                    UNION ALL
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_returns_merged_2022"
                    UNION ALL
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                     FROM audit_data."22_audit_s3_returns_merged_2023_01_2023_05"
                 --LIMIT 1000
                 ) rtn

                    -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                    LEFT JOIN
                        (
                         SELECT *
                         FROM audit_data.bcg_ach_mapping_detail
                         WHERE
                             (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                    AND
                                    (eps_id IS NULL))
                               OR
                              ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                    AND
                                    (eps_id IS NOT NULL)))
                                 -- Removes returns as returns are already linked to ach_id
                        ) AS bamd ON rtn."ach withdrawal id" = bamd.ach_id
                    LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(rtn."mail class") = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                      (((SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                          AND
                        cast(rtn.transaction_date as date)
                            >=
                        DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                          OR
                       ((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                        cast(rtn.s3_based_transaction_date as date)
                            >=
                        DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                          )
                      AND
                      (((SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                          AND
                        cast(rtn.transaction_date as date)
                            <
                        DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                          OR
                       ((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                        cast(rtn.s3_based_transaction_date as date)
                            <
                        DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                          )
                  )
                AND (rtn."ach withdrawal id" IS NOT NULL OR rtn."ach withdrawal id" NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
             --HAVING count(pic)>1
             ORDER BY pic desc
             --LIMIT 1000
            ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;
;


------------------------------
-- PROD RETURNS QUERY 20230614 JAN-DEC ZARA ONLY MATCHED TO USPS BY TRANSACTION DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
drop table IF EXISTS ZARA_2022_01_2022_12_returns;
create temp table ZARA_2022_01_2022_12_returns as

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              --'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              'RETURN'
              --'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              --'S3 DATE'
              --'MAILING DATE'
              'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              --'REFUND'
              'RETURN'
                 AS trx_type
          ),
     usps_detail AS --RETURN
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
            (
             SELECT
                 CASE WHEN
                     bamd.eps_account IN ('1000039729')
                     THEN 'Shippo Outbounds'
                 WHEN
                     bamd.eps_account IN ('1000039246')
                     THEN 'ESI Outbound'
                 WHEN
                     bamd.eps_account IN ('1000026687')
                     THEN 'Shippo Returns'
                 WHEN
                     bamd.eps_account IN ('1000052234')
                     THEN 'CEC Shippo Managed MIDs v2'
                 WHEN
                     bamd.eps_account IN ('1000051478')
                     THEN 'CEC Shippo Managed MIDs v1'
                 ELSE 'POSSIBLY ZARA'
                 END AS                    master_account_type,
                 rtn."mail class"              mail_class_id,
                 CASE WHEN
                     usl.usps_svc_lvl_name IS NOT NULL
                     THEN usl.usps_svc_lvl_name
                 ELSE 'UNKNOWN'
                 END AS                    mail_class_name,
                 CASE WHEN
                             usl.usps_svc_lvl_name ILIKE '%global%'
                         OR
                             usl.usps_svc_lvl_name ILIKE '%international%'
                     THEN 'INTERNATIONAL'
                 ELSE 'NATIONAL'
                 END AS                    national_international_svc,
                 CASE WHEN
                    (SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                    THEN rtn.transaction_month
                 WHEN
                    (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                    THEN rtn.s3_based_transaction_month
                 END AS trx_month,
                 CASE WHEN
                         (SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                     THEN cast(rtn.transaction_date as date)
                 WHEN
                         (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                     THEN cast(rtn.s3_based_transaction_date as date)
                 END AS                    trx_date,
                 rtn.pic,
                 rtn."grouping_id" grp_id,
                 rtn."transaction amount" usps_postage_cost
             FROM
                 (
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_returns_merged_2021"
                    UNION ALL
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_returns_merged_2022"
                    UNION ALL
                 SELECT
                    CAST("source_file" AS VARCHAR),
                    CAST("ach withdrawal id" AS VARCHAR),
                    CAST("available balance" AS VARCHAR),
                    CAST("business location" AS VARCHAR),
                    CAST("deposit source" AS VARCHAR),
                    CAST("destinating eps account for transfer" AS VARCHAR),
                    CAST("dispute id" AS VARCHAR),
                    CAST("dispute reason" AS VARCHAR),
                    CAST("due date" AS VARCHAR),
                    CAST("eps account number" AS VARCHAR),
                    CAST("invoice number" AS VARCHAR),
                    CAST("mail class" AS VARCHAR),
                    CAST("mailer id" AS VARCHAR),
                    CAST("original transaction id (for refund/reversal/adjustment)" AS VARCHAR),
                    CAST("originating eps account for transfer" AS VARCHAR),
                    CAST("payment method" AS VARCHAR),
                    CAST("pic" AS VARCHAR),
                    CAST("service type code" AS VARCHAR),
                    CAST("sku" AS VARCHAR),
                    CAST("transaction amount" AS REAL),
                    CAST("transaction date/time" AS DATE),
                    CAST("transaction description" AS VARCHAR),
                    CAST("transaction id" AS VARCHAR),
                    CAST("transaction type" AS VARCHAR),
                    CAST("transfer/withdrawal/correction reason" AS VARCHAR),
                    CAST("source_file_type" AS VARCHAR),
                    CAST("transaction_date" AS VARCHAR),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("transaction_month" AS VARCHAR),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                     FROM audit_data."22_audit_s3_returns_merged_2023_01_2023_05"
                 --LIMIT 1000
                 ) rtn

                    -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                    LEFT JOIN
                        (
                         SELECT *
                         FROM audit_data.bcg_ach_mapping_detail
                         WHERE
                             (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                    AND
                                    (eps_id IS NULL))
                               OR
                              ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                    AND
                                    (eps_id IS NOT NULL)))
                                 -- Removes returns as returns are already linked to ach_id
                        ) AS bamd ON rtn."ach withdrawal id" = bamd.ach_id
                    LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(rtn."mail class") = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                      (((SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                          AND
                        cast(rtn.transaction_date as date)
                            >=
                        DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                          OR
                       ((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                        cast(rtn.s3_based_transaction_date as date)
                            >=
                        DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                          )
                      AND
                      (((SELECT usps_compare_date FROM query_variables) IN ('TRANSACTION DATE')
                          AND
                        cast(rtn.transaction_date as date)
                            <
                        DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                          OR
                       ((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                           AND
                        cast(rtn.s3_based_transaction_date as date)
                            <
                        DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                          )
                  )
                AND (rtn."ach withdrawal id" IS NOT NULL OR rtn."ach withdrawal id" NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
             --HAVING count(pic)>1
             ORDER BY pic desc
             --LIMIT 1000
            ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;
;



--______ ___________ _   _ _   _______  _____
--| ___ \  ___|  ___| | | | \ | |  _  \/  ___|
--| |_/ / |__ | |_  | | | |  \| | | | |\ `--.
--|    /|  __||  _| | | | | . ` | | | | `--. \
--| |\ \| |___| |   | |_| | |\  | |/ / /\__/ /
--\_| \_\____/\_|    \___/\_| \_/___/  \____/

--------------------------------------------
------PROD<--USPS REFUND--------------------
--------------------------------------------

------------------------------
-- PROD REFUNDS QUERY 20230614 JAN-DEC INCL ESI MATCHED TO USPS BY S3 DATE
------------------------------
SET TIMEZONE TO 'US/PACIFIC';
create temp table EPS_ESI_2022_01_2022_12_REFUNDS as

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --REFUND
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
             (
             SELECT
                 CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC mistake'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                             master_account_type,
                  ref.c24_scan_mail_class                                mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                             mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                             national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN ref.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN ref.date_of_mailing_month
                      END AS                                             trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN cast(ref.s3_based_transaction_date as date)
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN cast(ref.d1_c14_date_of_mailing as date)
                      END AS                                             trx_date,
                  ref.c8_package_identification_code_pic                 pic,
                  ref.grouping_id grp_id,
                  ref.d1_c55_unused_label_refund_amount             usps_postage_cost

             FROM
                 (
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2021"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2022"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2023_01_2023_05"
                 ) ref

                -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                LEFT JOIN
                    (
                     SELECT *
                     FROM audit_data.bcg_ach_mapping_detail
                     WHERE
                         (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                AND
                                (eps_id IS NULL))
                           OR
                          ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                AND
                                (eps_id IS NOT NULL)))
                             -- Removes returns as returns are already linked to ach_id
                    ) AS bamd ON ref.s1_c9_caps_transaction_id = bamd.eps_id
                LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(ref.c24_scan_mail_class) = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       )
                   AND
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       )
               )
                 AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
            --HAVING count(pic)>1
            ORDER BY pic desc
            --LIMIT 1000
             ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;

;

------------------------------
-- PROD REFUNDS QUERY 20230614 JAN-DEC CEC ONLY MATCHED TO USPS BY S3 DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
create temp table CEC_2022_01_2022_12_Refunds as

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --REFUND
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
             (
             SELECT
                 CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC mistake'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                             master_account_type,
                  ref.c24_scan_mail_class                                mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                             mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                             national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN ref.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN ref.date_of_mailing_month
                      END AS                                             trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN cast(ref.s3_based_transaction_date as date)
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN cast(ref.d1_c14_date_of_mailing as date)
                      END AS                                             trx_date,
                  ref.c8_package_identification_code_pic                 pic,
                  ref.grouping_id grp_id,
                  ref.d1_c55_unused_label_refund_amount             usps_postage_cost

             FROM
                 (
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2021"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2022"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2023_01_2023_05"
                 ) ref

                -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                LEFT JOIN
                    (
                     SELECT *
                     FROM audit_data.bcg_ach_mapping_detail
                     WHERE
                         (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                AND
                                (eps_id IS NULL))
                           OR
                          ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                AND
                                (eps_id IS NOT NULL)))
                             -- Removes returns as returns are already linked to ach_id
                    ) AS bamd ON ref.s1_c9_caps_transaction_id = bamd.eps_id
                LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(ref.c24_scan_mail_class) = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       )
                   AND
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       )
               )
                 AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
            --HAVING count(pic)>1
            ORDER BY pic desc
            --LIMIT 1000
             ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;

;


------------------------------
-- PROD REFUNDS QUERY 20230614 JAN-DEC PARTIAL CEC MATCHED TO USPS BY S3 DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
create temp table PARTIAL_CEC_2022_01_2022_12_Refunds as

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --REFUND
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
             (
             SELECT
                 CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC mistake'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                             master_account_type,
                  ref.c24_scan_mail_class                                mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                             mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                             national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN ref.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN ref.date_of_mailing_month
                      END AS                                             trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN cast(ref.s3_based_transaction_date as date)
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN cast(ref.d1_c14_date_of_mailing as date)
                      END AS                                             trx_date,
                  ref.c8_package_identification_code_pic                 pic,
                  ref.grouping_id grp_id,
                  ref.d1_c55_unused_label_refund_amount             usps_postage_cost

             FROM
                 (
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2021"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2022"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2023_01_2023_05"
                 ) ref

                -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                LEFT JOIN
                    (
                     SELECT *
                     FROM audit_data.bcg_ach_mapping_detail
                     WHERE
                         (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                AND
                                (eps_id IS NULL))
                           OR
                          ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                AND
                                (eps_id IS NOT NULL)))
                             -- Removes returns as returns are already linked to ach_id
                    ) AS bamd ON ref.s1_c9_caps_transaction_id = bamd.eps_id
                LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(ref.c24_scan_mail_class) = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       )
                   AND
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       )
               )
                 AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
            --HAVING count(pic)>1
            ORDER BY pic desc
            --LIMIT 1000
             ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;

;

------------------------------
-- PROD REFUNDS QUERY 20230614 JAN-DEC CEC INTERNATIONAL MATCHED TO USPS BY S3 DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
create temp table International_CEC_2022_01_2022_12_Refunds as

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --REFUND
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
             (
             SELECT
                 CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC mistake'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                             master_account_type,
                  ref.c24_scan_mail_class                                mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                             mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                             national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN ref.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN ref.date_of_mailing_month
                      END AS                                             trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN cast(ref.s3_based_transaction_date as date)
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN cast(ref.d1_c14_date_of_mailing as date)
                      END AS                                             trx_date,
                  ref.c8_package_identification_code_pic                 pic,
                  ref.grouping_id grp_id,
                  ref.d1_c55_unused_label_refund_amount             usps_postage_cost

             FROM
                 (
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2021"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2022"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2023_01_2023_05"
                 ) ref

                -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                LEFT JOIN
                    (
                     SELECT *
                     FROM audit_data.bcg_ach_mapping_detail
                     WHERE
                         (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                AND
                                (eps_id IS NULL))
                           OR
                          ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                AND
                                (eps_id IS NOT NULL)))
                             -- Removes returns as returns are already linked to ach_id
                    ) AS bamd ON ref.s1_c9_caps_transaction_id = bamd.eps_id
                LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(ref.c24_scan_mail_class) = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       )
                   AND
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       )
               )
                 AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
            --HAVING count(pic)>1
            ORDER BY pic desc
            --LIMIT 1000
             ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;

;

------------------------------
-- PROD REFUNDS QUERY 20230614 JAN-DEC ZARA ONLY MATCHED TO USPS BY S3 DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
create temp table ZARA_CEC_2022_01_2022_12_Refunds as

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              --'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --REFUND
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
             (
             SELECT
                 CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC mistake'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                             master_account_type,
                  ref.c24_scan_mail_class                                mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                             mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                             national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN ref.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN ref.date_of_mailing_month
                      END AS                                             trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN cast(ref.s3_based_transaction_date as date)
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN cast(ref.d1_c14_date_of_mailing as date)
                      END AS                                             trx_date,
                  ref.c8_package_identification_code_pic                 pic,
                  ref.grouping_id grp_id,
                  ref.d1_c55_unused_label_refund_amount             usps_postage_cost

             FROM
                 (
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2021"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2022"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2023_01_2023_05"
                 ) ref

                -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                LEFT JOIN
                    (
                     SELECT *
                     FROM audit_data.bcg_ach_mapping_detail
                     WHERE
                         (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                AND
                                (eps_id IS NULL))
                           OR
                          ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                AND
                                (eps_id IS NOT NULL)))
                             -- Removes returns as returns are already linked to ach_id
                    ) AS bamd ON ref.s1_c9_caps_transaction_id = bamd.eps_id
                LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(ref.c24_scan_mail_class) = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       )
                   AND
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       )
               )
                 AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
            --HAVING count(pic)>1
            ORDER BY pic desc
            --LIMIT 1000
             ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;

;

--OUTBOUNDS--
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(USD_invcharge) as USD_invcharge,
                sum(USD_invrefund) as USD_invrefund,
                sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
       sum(converted_invcharge) as USD_invcharge,
       sum(converted_invrefund) as USD_invrefund,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from ZARA_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(USD_invcharge) as USD_invcharge,
                sum(USD_invrefund) as USD_invrefund,
                sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
       sum(converted_invcharge) as USD_invcharge,
       sum(converted_invrefund) as USD_invrefund,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from ZARA_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
---CEC International--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from INTERNATIONAL_CEC_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from INTERNATIONAL_CEC_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
--PARTIAL CEC--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from PARTIAL_CEC_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12)
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from PARTIAL_CEC_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12)
group by 1,2,3,4,5,6,7,8,9,10,11,12
--CEC ONLY--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from CEC_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12 )
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from PARTIAL_CEC_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12 )
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
--EPS-ESI---
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from EPS_ESI_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12
                                                      union
                             Select distinct invoice_id from CEC_2022_01_2022_12
                                                        union
                             Select distinct invoice_id from ZARA_2022_01_2022_12)
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from EPS_ESI_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12
                                                      union
                             Select distinct invoice_id from CEC_2022_01_2022_12
                                                        union
                             Select distinct invoice_id from ZARA_2022_01_2022_12)
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
--RETURNS---
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from ZARA_2022_01_2022_12_returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from ZARA_2022_01_2022_12_returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
---CEC International--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from INTERNATIONAL_CEC_2022_01_2022_12_returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from INTERNATIONAL_CEC_2022_01_2022_12_returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
--PARTIAL CEC--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from PARTIAL_CEC_2022_01_2022_12_Returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_returns)
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from PARTIAL_CEC_2022_01_2022_12_Returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_returns)
group by 1,2,3,4,5,6,7,8,9,10,11,12
--CEC ONLY--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from CEC_2022_01_2022_12_Returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_returns
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12_returns )
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from PARTIAL_CEC_2022_01_2022_12_returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_returns
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12_Returns )
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
--EPS-ESI---
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from EPS_ESI_2022_01_2022_12_RETRUNS
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_returns
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12_returns
                                                      union
                             Select distinct invoice_id from CEC_2022_01_2022_12_returns
                                                        union
                             Select distinct invoice_id from ZARA_2022_01_2022_12_returns)
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from EPS_ESI_2022_01_2022_12_RETRUNS
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_returns
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12_returns
                                                      union
                             Select distinct invoice_id from CEC_2022_01_2022_12_returns
                                                        union
                             Select distinct invoice_id from ZARA_2022_01_2022_12_returns)
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
--REFUNDS---
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from ZARA_CEC_2022_01_2022_12_Refunds
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from ZARA_CEC_2022_01_2022_12_Refunds
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
---CEC International--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from International_CEC_2022_01_2022_12_Refunds
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from International_CEC_2022_01_2022_12_Refunds
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
--PARTIAL CEC--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from PARTIAL_CEC_2022_01_2022_12_Refunds
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_Refunds)
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from PARTIAL_CEC_2022_01_2022_12_Refunds
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_refunds)
group by 1,2,3,4,5,6,7,8,9,10,11,12
--CEC ONLY--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from CEC_2022_01_2022_12_Refunds
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_refunds
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12_refunds )
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from CEC_2022_01_2022_12_Refunds
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_refunds
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12_Refunds )
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
--EPS-ESI---
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from EPS_ESI_2022_01_2022_12_REFUNDS
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_refunds
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12_refunds
                                                      union
                             Select distinct invoice_id from CEC_2022_01_2022_12_refunds
                                                        union
                             Select distinct invoice_id from ZARA_CEC_2022_01_2022_12_Refunds)
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from EPS_ESI_2022_01_2022_12_refunds
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_refunds
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12_refunds
                                                      union
                             Select distinct invoice_id from CEC_2022_01_2022_12_refunds
                                                        union
                             Select distinct invoice_id from ZARA_CEC_2022_01_2022_12_Refunds)
group by 1,2,3,4,5,6,7,8,9,10,11,12;


------------------------------
-- TEST - CONTROL PROD REFUNDS QUERY 20230614 JAN-DEC ZARA ONLY MATCHED TO USPS BY S3 DATE
------------------------------
SET TIMEZONE TO 'US/PACIFIC';
SELECT
       'REFUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost

FROM (

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              --'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     epsid_detail AS
         (SELECT DISTINCT
              svb_pmt_mnth,
              CASE WHEN
                  (SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                  THEN NULL
                  ELSE CAST(transaction_id AS VARCHAR)
                  END AS eps_id,
              CAST(eps_account_number AS VARCHAR) eps_account_number,
              eps_account_nickname,
              ach_id
              FROM audit_data."22_audit_eps_svb_transaction_history_recon_2021_12_2021_12_no_errors"
              WHERE svb_pmt_mnth IS NOT NULL
          UNION
          SELECT DISTINCT
              svb_pmt_mnth,
              CASE WHEN
                  (SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                  THEN NULL
                  ELSE CAST(transaction_id AS VARCHAR)
                  END AS eps_id,
              CAST(eps_account_number AS VARCHAR) eps_account_number,
              eps_account_nickname,
              ach_id
              FROM audit_data."22_audit_eps_svb_transaction_history_recon_2022_01_2022_12_no_errors"
              WHERE svb_pmt_mnth IS NOT NULL
          UNION
          SELECT DISTINCT
              svb_pmt_mnth,
              CASE WHEN
                  (SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                  THEN NULL
                  ELSE CAST(transaction_id AS VARCHAR)
                  END AS eps_id,
              CAST("eps_account_ number" AS VARCHAR) eps_account_number,
              eps_account_nickname,
              ach_id
              FROM audit_data."22_audit_eps_svb_transaction_history_recon_2023_01_2023_01_no_errors"
              WHERE svb_pmt_mnth IS NOT NULL
        ),
     usps_detail AS --REFUND
         (
          SELECT
                  CASE WHEN
                      epsid.eps_account_number IN ('1000039729')
                  THEN 'Shippo Outbounds'
                  WHEN
                      epsid.eps_account_number IN ('1000039246')
                  THEN 'ESI Outbound'
                  WHEN
                      epsid.eps_account_number IN ('1000026687')
                  THEN 'Shippo Returns'
                  WHEN
                      epsid.eps_account_number IN ('1000052234')
                  THEN 'CEC Shippo Managed MIDs v2'
                  WHEN
                      epsid.eps_account_number IN ('1000051478')
                  THEN 'CEC mistake'
                  ELSE 'UNKNOWN'
                  END AS master_account_type,
                  ref.c24_scan_mail_class mail_class_id,
                  CASE WHEN
                      usl.usps_svc_lvl_name IS NOT NULL
                  THEN usl.usps_svc_lvl_name
                  ELSE 'UNKNOWN'
                  END AS mail_class_name,
                  CASE WHEN
                      usl.usps_svc_lvl_name ILIKE '%global%'
                      OR
                      usl.usps_svc_lvl_name ILIKE '%international%'
                  THEN 'INTERNATIONAL'
                  ELSE 'NATIONAL'
                  END AS national_international_svc,
                  CASE WHEN
                  (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                  THEN cast(ref.s3_based_transaction_date as date)
                  WHEN
                  (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                  THEN cast(ref.d1_c14_date_of_mailing as date)
                  END AS trx_date,
                  ref.c8_package_identification_code_pic pic,
                  COUNT(DISTINCT ref.c8_package_identification_code_pic) pic_dcount,
                  COUNT(ref.c8_package_identification_code_pic) pic_count,
                  SUM(ref.d1_c55_unused_label_refund_amount) usps_postage_cost
              FROM audit_data."22_audit_s3_refunds_merged_2021" ref
              LEFT JOIN epsid_detail AS epsid ON ref.s1_c9_caps_transaction_id = epsid.eps_id
              LEFT JOIN usps_svc_lvl AS usl ON ref.c24_scan_mail_class = usl.usps_svc_lvl_id
              WHERE
                    (
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                            AND
                          cast(ref.s3_based_transaction_date as date)
                              >=
                          DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                  (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                            OR
                           ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                           cast(ref.d1_c14_date_of_mailing as date)
                              >=
                          DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                  (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))

                       )
                AND
                        (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                            AND
                          cast(ref.s3_based_transaction_date as date)
                              <
                          DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                  (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                            OR
                           ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                           cast(ref.d1_c14_date_of_mailing as date)
                              <
                          DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                  (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))

                        )
                        )
                AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
              GROUP BY master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_date, pic
          UNION
          SELECT
                  CASE WHEN
                      epsid.eps_account_number IN ('1000039729')
                  THEN 'Shippo Outbounds'
                  WHEN
                      epsid.eps_account_number IN ('1000039246')
                  THEN 'ESI Outbound'
                  WHEN
                      epsid.eps_account_number IN ('1000026687')
                  THEN 'Shippo Returns'
                  WHEN
                      epsid.eps_account_number IN ('1000052234')
                  THEN 'CEC Shippo Managed MIDs v2'
                  WHEN
                      epsid.eps_account_number IN ('1000051478')
                  THEN 'CEC mistake'
                  ELSE 'UNKNOWN'
                  END AS master_account_type,
                  ref.c24_scan_mail_class mail_class_id,
                  CASE WHEN
                      usl.usps_svc_lvl_name IS NOT NULL
                  THEN usl.usps_svc_lvl_name
                  ELSE 'UNKNOWN'
                  END AS mail_class_name,
                  CASE WHEN
                      usl.usps_svc_lvl_name ILIKE '%global%'
                      OR
                      usl.usps_svc_lvl_name ILIKE '%international%'
                  THEN 'INTERNATIONAL'
                  ELSE 'NATIONAL'
                  END AS national_international_svc,
                  CASE WHEN
                  (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                  THEN cast(ref.s3_based_transaction_date as date)
                  WHEN
                  (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                  THEN cast(ref.d1_c14_date_of_mailing as date)
                  END AS trx_date,
                  ref.c8_package_identification_code_pic pic,
                  COUNT(DISTINCT ref.c8_package_identification_code_pic) pic_dcount,
                  COUNT(ref.c8_package_identification_code_pic) pic_count,
                  SUM(ref.d1_c55_unused_label_refund_amount) usps_postage_cost
              FROM audit_data."22_audit_s3_refunds_merged_2022" ref
              LEFT JOIN epsid_detail AS epsid ON ref.s1_c9_caps_transaction_id = epsid.eps_id
              LEFT JOIN usps_svc_lvl AS usl ON ref.c24_scan_mail_class = usl.usps_svc_lvl_id
              WHERE
                    (
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                            AND
                          cast(ref.s3_based_transaction_date as date)
                              >=
                          DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                  (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                            OR
                           ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                           cast(ref.d1_c14_date_of_mailing as date)
                              >=
                          DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                  (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))

                       )
                AND
                        (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                            AND
                          cast(ref.s3_based_transaction_date as date)
                              <
                          DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                  (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                            OR
                           ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                           cast(ref.d1_c14_date_of_mailing as date)
                              <
                          DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                  (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))

                        )
                        )
                AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
              GROUP BY master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_date, pic
          UNION
          SELECT
                  CASE WHEN
                      epsid.eps_account_number IN ('1000039729')
                  THEN 'Shippo Outbounds'
                  WHEN
                      epsid.eps_account_number IN ('1000039246')
                  THEN 'ESI Outbound'
                  WHEN
                      epsid.eps_account_number IN ('1000026687')
                  THEN 'Shippo Returns'
                  WHEN
                      epsid.eps_account_number IN ('1000052234')
                  THEN 'CEC Shippo Managed MIDs v2'
                  WHEN
                      epsid.eps_account_number IN ('1000051478')
                  THEN 'CEC mistake'
                  ELSE 'UNKNOWN'
                  END AS master_account_type,
                  ref.c24_scan_mail_class mail_class_id,
                  CASE WHEN
                      usl.usps_svc_lvl_name IS NOT NULL
                  THEN usl.usps_svc_lvl_name
                  ELSE 'UNKNOWN'
                  END AS mail_class_name,
                  CASE WHEN
                      usl.usps_svc_lvl_name ILIKE '%global%'
                      OR
                      usl.usps_svc_lvl_name ILIKE '%international%'
                  THEN 'INTERNATIONAL'
                  ELSE 'NATIONAL'
                  END AS national_international_svc,
                  CASE WHEN
                  (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                  THEN cast(ref.s3_based_transaction_date as date)
                  WHEN
                  (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                  THEN cast(ref.d1_c14_date_of_mailing as date)
                  END AS trx_date,
                  ref.c8_package_identification_code_pic pic,
                  COUNT(DISTINCT ref.c8_package_identification_code_pic) pic_dcount,
                  COUNT(ref.c8_package_identification_code_pic) pic_count,
                  SUM(ref.d1_c55_unused_label_refund_amount) usps_postage_cost
              FROM audit_data."22_audit_s3_refunds_merged_2023_01_2023_05" ref
              LEFT JOIN epsid_detail AS epsid ON ref.s1_c9_caps_transaction_id = epsid.eps_id
              LEFT JOIN usps_svc_lvl AS usl ON ref.c24_scan_mail_class = usl.usps_svc_lvl_id
              WHERE
                    (
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                            AND
                          cast(ref.s3_based_transaction_date as date)
                              >=
                          DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                  (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                            OR
                           ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                           cast(ref.d1_c14_date_of_mailing as date)
                              >=
                          DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                  (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))

                       )
                AND
                        (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                            AND
                          cast(ref.s3_based_transaction_date as date)
                              <
                          DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                  (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                            OR
                           ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                           cast(ref.d1_c14_date_of_mailing as date)
                              <
                          DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                  (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))

                        )
                        )
                AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
              GROUP BY master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_date, pic
          --LIMIT 25
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
--invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;
)

GROUP BY
    prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn






------------------------------
-- TEST - NOT FIXED TO USPS MATCHING PROD REFUNDS QUERY 20230614 JAN-DEC ZARA ONLY MATCHED TO USPS BY S3 DATE
------------------------------
SET TIMEZONE TO 'US/PACIFIC';
SELECT
       'REFUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost

FROM (

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              --'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     epsid_detail AS
         (SELECT DISTINCT
              svb_pmt_mnth,
              CASE WHEN
                  (SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                  THEN NULL
                  ELSE CAST(transaction_id AS VARCHAR)
                  END AS eps_id,
              CAST(eps_account_number AS VARCHAR) eps_account_number,
              eps_account_nickname,
              ach_id
              FROM audit_data."22_audit_eps_svb_transaction_history_recon_2021_12_2021_12_no_errors"
              WHERE svb_pmt_mnth IS NOT NULL
          UNION
          SELECT DISTINCT
              svb_pmt_mnth,
              CASE WHEN
                  (SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                  THEN NULL
                  ELSE CAST(transaction_id AS VARCHAR)
                  END AS eps_id,
              CAST(eps_account_number AS VARCHAR) eps_account_number,
              eps_account_nickname,
              ach_id
              FROM audit_data."22_audit_eps_svb_transaction_history_recon_2022_01_2022_12_no_errors"
              WHERE svb_pmt_mnth IS NOT NULL
          UNION
          SELECT DISTINCT
              svb_pmt_mnth,
              CASE WHEN
                  (SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                  THEN NULL
                  ELSE CAST(transaction_id AS VARCHAR)
                  END AS eps_id,
              CAST("eps_account_ number" AS VARCHAR) eps_account_number,
              eps_account_nickname,
              ach_id
              FROM audit_data."22_audit_eps_svb_transaction_history_recon_2023_01_2023_01_no_errors"
              WHERE svb_pmt_mnth IS NOT NULL
        ),
     usps_detail AS --REFUND
         (
          SELECT
                  CASE WHEN
                      epsid.eps_account_number IN ('1000039729')
                  THEN 'Shippo Outbounds'
                  WHEN
                      epsid.eps_account_number IN ('1000039246')
                  THEN 'ESI Outbound'
                  WHEN
                      epsid.eps_account_number IN ('1000026687')
                  THEN 'Shippo Returns'
                  WHEN
                      epsid.eps_account_number IN ('1000052234')
                  THEN 'CEC Shippo Managed MIDs v2'
                  WHEN
                      epsid.eps_account_number IN ('1000051478')
                  THEN 'CEC mistake'
                  ELSE 'UNKNOWN'
                  END AS master_account_type,
                  ref.c24_scan_mail_class mail_class_id,
                  CASE WHEN
                      usl.usps_svc_lvl_name IS NOT NULL
                  THEN usl.usps_svc_lvl_name
                  ELSE 'UNKNOWN'
                  END AS mail_class_name,
                  CASE WHEN
                      usl.usps_svc_lvl_name ILIKE '%global%'
                      OR
                      usl.usps_svc_lvl_name ILIKE '%international%'
                  THEN 'INTERNATIONAL'
                  ELSE 'NATIONAL'
                  END AS national_international_svc,
                  CASE WHEN
                  (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                  THEN cast(ref.s3_based_transaction_date as date)
                  WHEN
                  (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                  THEN cast(ref.d1_c14_date_of_mailing as date)
                  END AS trx_date,
                  ref.c8_package_identification_code_pic pic,
                  COUNT(DISTINCT ref.c8_package_identification_code_pic) pic_dcount,
                  COUNT(ref.c8_package_identification_code_pic) pic_count,
                  SUM(ref.d1_c55_unused_label_refund_amount) usps_postage_cost
              FROM audit_data."22_audit_s3_refunds_merged_2021" ref
              LEFT JOIN epsid_detail AS epsid ON ref.s1_c9_caps_transaction_id = epsid.eps_id
              LEFT JOIN usps_svc_lvl AS usl ON ref.c24_scan_mail_class = usl.usps_svc_lvl_id
              WHERE
                    (
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                            AND
                          cast(ref.s3_based_transaction_date as date)
                              >=
                          DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                  (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                            OR
                           ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                           cast(ref.d1_c14_date_of_mailing as date)
                              >=
                          DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                  (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))

                       )
                AND
                        (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                            AND
                          cast(ref.s3_based_transaction_date as date)
                              <
                          DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                  (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                            OR
                           ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                           cast(ref.d1_c14_date_of_mailing as date)
                              <
                          DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                  (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))

                        )
                        )
                AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
              GROUP BY master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_date, pic
          UNION
          SELECT
                  CASE WHEN
                      epsid.eps_account_number IN ('1000039729')
                  THEN 'Shippo Outbounds'
                  WHEN
                      epsid.eps_account_number IN ('1000039246')
                  THEN 'ESI Outbound'
                  WHEN
                      epsid.eps_account_number IN ('1000026687')
                  THEN 'Shippo Returns'
                  WHEN
                      epsid.eps_account_number IN ('1000052234')
                  THEN 'CEC Shippo Managed MIDs v2'
                  WHEN
                      epsid.eps_account_number IN ('1000051478')
                  THEN 'CEC mistake'
                  ELSE 'UNKNOWN'
                  END AS master_account_type,
                  ref.c24_scan_mail_class mail_class_id,
                  CASE WHEN
                      usl.usps_svc_lvl_name IS NOT NULL
                  THEN usl.usps_svc_lvl_name
                  ELSE 'UNKNOWN'
                  END AS mail_class_name,
                  CASE WHEN
                      usl.usps_svc_lvl_name ILIKE '%global%'
                      OR
                      usl.usps_svc_lvl_name ILIKE '%international%'
                  THEN 'INTERNATIONAL'
                  ELSE 'NATIONAL'
                  END AS national_international_svc,
                  CASE WHEN
                  (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                  THEN cast(ref.s3_based_transaction_date as date)
                  WHEN
                  (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                  THEN cast(ref.d1_c14_date_of_mailing as date)
                  END AS trx_date,
                  ref.c8_package_identification_code_pic pic,
                  COUNT(DISTINCT ref.c8_package_identification_code_pic) pic_dcount,
                  COUNT(ref.c8_package_identification_code_pic) pic_count,
                  SUM(ref.d1_c55_unused_label_refund_amount) usps_postage_cost
              FROM audit_data."22_audit_s3_refunds_merged_2022" ref
              LEFT JOIN epsid_detail AS epsid ON ref.s1_c9_caps_transaction_id = epsid.eps_id
              LEFT JOIN usps_svc_lvl AS usl ON ref.c24_scan_mail_class = usl.usps_svc_lvl_id
              WHERE
                    (
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                            AND
                          cast(ref.s3_based_transaction_date as date)
                              >=
                          DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                  (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                            OR
                           ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                           cast(ref.d1_c14_date_of_mailing as date)
                              >=
                          DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                  (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))

                       )
                AND
                        (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                            AND
                          cast(ref.s3_based_transaction_date as date)
                              <
                          DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                  (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                            OR
                           ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                           cast(ref.d1_c14_date_of_mailing as date)
                              <
                          DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                  (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))

                        )
                        )
                AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
              GROUP BY master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_date, pic
          UNION
          SELECT
                  CASE WHEN
                      epsid.eps_account_number IN ('1000039729')
                  THEN 'Shippo Outbounds'
                  WHEN
                      epsid.eps_account_number IN ('1000039246')
                  THEN 'ESI Outbound'
                  WHEN
                      epsid.eps_account_number IN ('1000026687')
                  THEN 'Shippo Returns'
                  WHEN
                      epsid.eps_account_number IN ('1000052234')
                  THEN 'CEC Shippo Managed MIDs v2'
                  WHEN
                      epsid.eps_account_number IN ('1000051478')
                  THEN 'CEC mistake'
                  ELSE 'UNKNOWN'
                  END AS master_account_type,
                  ref.c24_scan_mail_class mail_class_id,
                  CASE WHEN
                      usl.usps_svc_lvl_name IS NOT NULL
                  THEN usl.usps_svc_lvl_name
                  ELSE 'UNKNOWN'
                  END AS mail_class_name,
                  CASE WHEN
                      usl.usps_svc_lvl_name ILIKE '%global%'
                      OR
                      usl.usps_svc_lvl_name ILIKE '%international%'
                  THEN 'INTERNATIONAL'
                  ELSE 'NATIONAL'
                  END AS national_international_svc,
                  CASE WHEN
                  (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                  THEN cast(ref.s3_based_transaction_date as date)
                  WHEN
                  (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                  THEN cast(ref.d1_c14_date_of_mailing as date)
                  END AS trx_date,
                  ref.c8_package_identification_code_pic pic,
                  COUNT(DISTINCT ref.c8_package_identification_code_pic) pic_dcount,
                  COUNT(ref.c8_package_identification_code_pic) pic_count,
                  SUM(ref.d1_c55_unused_label_refund_amount) usps_postage_cost
              FROM audit_data."22_audit_s3_refunds_merged_2023_01_2023_05" ref
              LEFT JOIN epsid_detail AS epsid ON ref.s1_c9_caps_transaction_id = epsid.eps_id
              LEFT JOIN usps_svc_lvl AS usl ON ref.c24_scan_mail_class = usl.usps_svc_lvl_id
              WHERE
                    (
                       (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                            AND
                          cast(ref.s3_based_transaction_date as date)
                              >=
                          DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                  (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                            OR
                           ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                           cast(ref.d1_c14_date_of_mailing as date)
                              >=
                          DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                                  (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))

                       )
                AND
                        (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                            AND
                          cast(ref.s3_based_transaction_date as date)
                              <
                          DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                  (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                            OR
                           ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                            AND
                           cast(ref.d1_c14_date_of_mailing as date)
                              <
                          DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                                  (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))

                        )
                        )
                AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
              GROUP BY master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_date, pic
          --LIMIT 25
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
--invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
--  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
--    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;
)

GROUP BY
    prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn

ORDER BY query_param

Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from ZARA_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from ZARA_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
---CEC International--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from INTERNATIONAL_CEC_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from INTERNATIONAL_CEC_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
--PARTIAL CEC--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from PARTIAL_CEC_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12)
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from PARTIAL_CEC_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12)
group by 1,2,3,4,5,6,7,8,9,10,11,12
--CEC ONLY--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from CEC_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12 )
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from PARTIAL_CEC_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12 )
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
--EPS-ESI---
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from EPS_ESI_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12
                                                      union
                             Select distinct invoice_id from CEC_2022_01_2022_12
                                                        union
                             Select distinct invoice_id from ZARA_2022_01_2022_12)
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from EPS_ESI_2022_01_2022_12
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12
                                                      union
                             Select distinct invoice_id from CEC_2022_01_2022_12
                                                        union
                             Select distinct invoice_id from ZARA_2022_01_2022_12)
group by 1,2,3,4,5,6,7,8,9,10,11,12;



Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from ZARA_2022_01_2022_12_returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from ZARA_2022_01_2022_12_returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
---CEC International--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from INTERNATIONAL_CEC_2022_01_2022_12_returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from INTERNATIONAL_CEC_2022_01_2022_12_returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
group by 1,2,3,4,5,6,7,8,9,10,11,12
--PARTIAL CEC--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from PARTIAL_CEC_2022_01_2022_12_Returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_returns)
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from PARTIAL_CEC_2022_01_2022_12_Returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_returns)
group by 1,2,3,4,5,6,7,8,9,10,11,12
--CEC ONLY--
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from CEC_2022_01_2022_12_Returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_returns
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12_returns )
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from PARTIAL_CEC_2022_01_2022_12_returns
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_returns
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12_Returns )
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
--EPS-ESI---
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
      sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                --sum(USD_invcharge) as USD_invcharge,
                --sum(USD_invrefund) as USD_invrefund,
                --sum(USD_USPS_invcharge) as USD_USPS_invcharge,
                --sum(USD_NON_USPS_invcharge) as USD_NON_USPS_invcharge,
                --sum(USD_USPS_invrefund) as USD_USPS_invrefund,
                --sum(USD_NON_USPS_invrefund) as USD_NON_USPS_invrefund,
                --sum(USD_BP_Amount) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from
    (Select   Stripe_month as Month,'Stripe-Prod' as Category,STRP.reporting_Category,description,created_utc,available_on_utc,STRP.invoice_id, --Change 7
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
     case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
      Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
     case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else BP.object_created end  as Billing_date,
   Invoices_retry,net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from          Stripe_data    STRP
    --left join invoice_date_info ID on STRP.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on STRP.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on STRP.invoice_id=UP.invoice_id
left join  Prod_Invoiceitem  INV on STRP.invoice_id=INV.invoice_id
    left join Invoice_check IC on STRP.invoice_id=IC.id
    left join Billing_check BC on STRP.invoice_id=BC.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on STRP.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from EPS_ESI_2022_01_2022_12_RETRUNS
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id

group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_returns
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12_returns
                                                      union
                             Select distinct invoice_id from CEC_2022_01_2022_12_returns
                                                        union
                             Select distinct invoice_id from ZARA_2022_01_2022_12_returns)
group by 1,2,3,4,5,6,7,8,9,10,11,12
union
Select Month, Category,query_param,reporting_Category,STRP_flag,INV_flag,Billing_flag,Before_2021,paid_before,paid_after,Invoices_retry,net_suite,
       sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost
from (Select TO_CHAR(TO_DATE(paid, 'YYYY-MM-DD'), 'Mon-YY') as Month ,'Prod-Stripe' as Category,'' as reporting_Category,'' as description,
        created_utc,  available_on_utc,cast(INV.invoice_id as varchar(256)) as invoice_id, --Change 8
    case when STRP.invoice_id is not null then 1 else 0 end as STRP_flag,
    case when INV.invoice_id is not null then 1 else 0 end as INV_flag,
    case when BP.invoice_id is not null then 1 else 0 end as Billing_flag,query_param,
     Case when invoice_created::date < (select source_tables_start_timestamp_filter from console_query_variables) then 1 else 0 end as Before_2021,
     Case when invoice_paid::date < (select query_start_timestamp_filter from console_query_variables)  then 1 else 0 end as paid_before,
     Case when invoice_paid::date >(select query_end_timestamp_filter from console_query_variables) then 1 else 0 end as paid_after,
    case when INV.paid is null then invoice_paid else INV.paid end  as invoice_date,
     case when BP.object_created is null then billing_created else INV.paid end  as Billing_date,
     0 as Invoices_retry, 0 as net_suite,
    sum(customer_facing_amount) as customer_facing_amount,sum(gross) as gross,sum(net) as net,
                sum(invcharge) as invcharge,sum(invrefund) as invrefund,
                sum(Amount_Converted) as USD_BP_Amount,
                sum(prod_postage_cost) as prod_postage_cost,
       sum(usps_postage_cost) as usps_postage_cost,
                sum(BP.amount) as BP_amount
from       Prod_Invoiceitem INV
     left join Invoice_check IC on INV.invoice_id=IC.id
    left join Billing_check BC on INV.invoice_id=BC.invoice_id
    --left join invoice_date_info ID on INV.invoice_id=ID.invoice_id
    --left join Invoice_having_pre2019 PRE on INV.invoice_id=PRE.invoice_id
    --left join later_than_updated UP on INV.invoice_id=UP.invoice_id
left join  (Select * from (Select S.*,row_number () over (PARTITION BY invoice_id order by gross desc ) as Invoice_count from  Stripe_data S)A where Invoice_count=1)  STRP on INV.invoice_id=STRP.invoice_id
left join (Select distinct invoice_id,object_created,object_updated,sum(Amount_Converted)as Amount_Converted,sum(amount) as amount from Billing_payment_info where billing_row=1 group by 1,2,3) BP on INV.invoice_id=BP.invoice_id
inner join (SELECT invoice_id,
       'OUTBOUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost from EPS_ESI_2022_01_2022_12_RETRUNS
                    group by invoice_id,prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn) EPS_ESI on STRP.invoice_id=EPS_ESI.invoice_id
group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)A
where invoice_id not in (Select distinct invoice_id from INTERNATIONAL_CEC_2022_01_2022_12_returns
                                                    union
                           Select distinct invoice_id from PARTIAL_CEC_2022_01_2022_12_returns
                                                      union
                             Select distinct invoice_id from CEC_2022_01_2022_12_returns
                                                        union
                             Select distinct invoice_id from ZARA_2022_01_2022_12_returns)
group by 1,2,3,4,5,6,7,8,9,10,11,12;


-- _____ _   __________  ________ _____ _____ ___________    ______ ___________ _   _ _   _______  _____
--/  ___| | | | ___ \  \/  |_   _|_   _|_   _|  ___|  _  \   | ___ \  ___|  ___| | | | \ | |  _  \/  ___|
--\ `--.| | | | |_/ / .  . | | |   | |   | | | |__ | | | |   | |_/ / |__ | |_  | | | |  \| | | | |\ `--.
-- `--. \ | | | ___ \ |\/| | | |   | |   | | |  __|| | | |   |    /|  __||  _| | | | | . ` | | | | `--. \
--/\__/ / |_| | |_/ / |  | |_| |_  | |   | | | |___| |/ /    | |\ \| |___| |   | |_| | |\  | |/ / /\__/ /
--\____/ \___/\____/\_|  |_/\___/  \_/   \_/ \____/|___/     \_| \_\____/\_|    \___/\_| \_/___/  \____/

------------------------------
-- PROD !!SUBMITTED!! REFUNDS ONLY QUERY 20230614 JAN-DEC INCL ESI MATCHED TO USPS BY S3 DATE
------------------------------
SET TIMEZONE TO 'US/PACIFIC';
SELECT
       'REFUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       submission_status,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost

FROM (

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --REFUND
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
             (
             SELECT
                 CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC mistake'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                             master_account_type,
                  ref.c24_scan_mail_class                                mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                             mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                             national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN ref.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN ref.date_of_mailing_month
                      END AS                                             trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN cast(ref.s3_based_transaction_date as date)
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN cast(ref.d1_c14_date_of_mailing as date)
                      END AS                                             trx_date,
                  ref.c8_package_identification_code_pic                 pic,
                  ref.grouping_id grp_id,
                  ref.d1_c55_unused_label_refund_amount             usps_postage_cost

             FROM
                 (
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2021"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2022"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2023_01_2023_05"
                 ) ref

                -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                LEFT JOIN
                    (
                     SELECT *
                     FROM audit_data.bcg_ach_mapping_detail
                     WHERE
                         (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                AND
                                (eps_id IS NULL))
                           OR
                          ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                AND
                                (eps_id IS NOT NULL)))
                             -- Removes returns as returns are already linked to ach_id
                    ) AS bamd ON ref.s1_c9_caps_transaction_id = bamd.eps_id
                LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(ref.c24_scan_mail_class) = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       )
                   AND
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       )
               )
                 AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
            --HAVING count(pic)>1
            ORDER BY pic desc
            --LIMIT 1000
             ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
--invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;
)

WHERE submission_status IN ('submitted')

GROUP BY
    prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn, submission_status

UNION
--;







------------------------------
-- PROD !!SUBMITTED!! REFUNDS ONLY QUERY 20230614 JAN-DEC CEC ONLY MATCHED TO USPS BY S3 DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
SELECT
       'REFUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       submission_status,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost

FROM (

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --REFUND
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
             (
             SELECT
                 CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC mistake'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                             master_account_type,
                  ref.c24_scan_mail_class                                mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                             mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                             national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN ref.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN ref.date_of_mailing_month
                      END AS                                             trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN cast(ref.s3_based_transaction_date as date)
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN cast(ref.d1_c14_date_of_mailing as date)
                      END AS                                             trx_date,
                  ref.c8_package_identification_code_pic                 pic,
                  ref.grouping_id grp_id,
                  ref.d1_c55_unused_label_refund_amount             usps_postage_cost

             FROM
                 (
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2021"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2022"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2023_01_2023_05"
                 ) ref

                -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                LEFT JOIN
                    (
                     SELECT *
                     FROM audit_data.bcg_ach_mapping_detail
                     WHERE
                         (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                AND
                                (eps_id IS NULL))
                           OR
                          ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                AND
                                (eps_id IS NOT NULL)))
                             -- Removes returns as returns are already linked to ach_id
                    ) AS bamd ON ref.s1_c9_caps_transaction_id = bamd.eps_id
                LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(ref.c24_scan_mail_class) = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       )
                   AND
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       )
               )
                 AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
            --HAVING count(pic)>1
            ORDER BY pic desc
            --LIMIT 1000
             ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )




--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
--invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;
)

WHERE submission_status IN ('submitted')

GROUP BY
    prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn, submission_status

UNION
--;







------------------------------
-- PROD !!SUBMITTED!! REFUNDS ONLY QUERY 20230614 JAN-DEC PARTIAL CEC MATCHED TO USPS BY S3 DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
SELECT
       'REFUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       submission_status,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost

FROM (

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --REFUND
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
             (
             SELECT
                 CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC mistake'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                             master_account_type,
                  ref.c24_scan_mail_class                                mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                             mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                             national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN ref.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN ref.date_of_mailing_month
                      END AS                                             trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN cast(ref.s3_based_transaction_date as date)
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN cast(ref.d1_c14_date_of_mailing as date)
                      END AS                                             trx_date,
                  ref.c8_package_identification_code_pic                 pic,
                  ref.grouping_id grp_id,
                  ref.d1_c55_unused_label_refund_amount             usps_postage_cost

             FROM
                 (
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2021"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2022"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2023_01_2023_05"
                 ) ref

                -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                LEFT JOIN
                    (
                     SELECT *
                     FROM audit_data.bcg_ach_mapping_detail
                     WHERE
                         (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                AND
                                (eps_id IS NULL))
                           OR
                          ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                AND
                                (eps_id IS NOT NULL)))
                             -- Removes returns as returns are already linked to ach_id
                    ) AS bamd ON ref.s1_c9_caps_transaction_id = bamd.eps_id
                LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(ref.c24_scan_mail_class) = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       )
                   AND
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       )
               )
                 AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
            --HAVING count(pic)>1
            ORDER BY pic desc
            --LIMIT 1000
             ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
--invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;
)

WHERE submission_status IN ('submitted')

GROUP BY
    prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn, submission_status

UNION
--;







------------------------------
-- PROD !!SUBMITTED!! REFUNDS ONLY QUERY 20230614 JAN-DEC CEC INTERNATIONAL MATCHED TO USPS BY S3 DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
SELECT
       'REFUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       submission_status,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost

FROM (

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              --'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              --'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --REFUND
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
             (
             SELECT
                 CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC mistake'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                             master_account_type,
                  ref.c24_scan_mail_class                                mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                             mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                             national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN ref.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN ref.date_of_mailing_month
                      END AS                                             trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN cast(ref.s3_based_transaction_date as date)
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN cast(ref.d1_c14_date_of_mailing as date)
                      END AS                                             trx_date,
                  ref.c8_package_identification_code_pic                 pic,
                  ref.grouping_id grp_id,
                  ref.d1_c55_unused_label_refund_amount             usps_postage_cost

             FROM
                 (
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2021"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2022"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2023_01_2023_05"
                 ) ref

                -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                LEFT JOIN
                    (
                     SELECT *
                     FROM audit_data.bcg_ach_mapping_detail
                     WHERE
                         (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                AND
                                (eps_id IS NULL))
                           OR
                          ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                AND
                                (eps_id IS NOT NULL)))
                             -- Removes returns as returns are already linked to ach_id
                    ) AS bamd ON ref.s1_c9_caps_transaction_id = bamd.eps_id
                LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(ref.c24_scan_mail_class) = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       )
                   AND
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       )
               )
                 AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
            --HAVING count(pic)>1
            ORDER BY pic desc
            --LIMIT 1000
             ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
--invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;
)

WHERE submission_status IN ('submitted')

GROUP BY
    prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn, submission_status

UNION
--;






------------------------------
-- PROD !!SUBMITTED!! REFUNDS ONLY QUERY 20230614 JAN-DEC ZARA ONLY MATCHED TO USPS BY S3 DATE
------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
SELECT
       'REFUND' prod_query_type,
       query_param,
       lbl_generation_mnth,
       refund_date_mnth,
       purchase_date_mnth_no_ref_appv,
       out_or_rtn,
       submission_status,
       count(DISTINCT api_transaction_id) dcount,
       count(api_transaction_id) count,
       sum(actual_postage_cost) prod_postage_cost,
       sum(usps_postage_cost) usps_postage_cost

FROM (

--------------------------------------------
--------------------------------------------
-----WITH STATEMENT-------------------------
--------------------------------------------
--------------------------------------------
--SET TIMEZONE TO 'US/PACIFIC';
WITH query_variables AS
         (SELECT
              -- BELOW IS TO TOGGLE WHETHER OR NOT ESI/ CEC ACCOUNTS ARE INCLUDED/ EXCLUDED FROM QUERY
              --'EXCLUDE ESI, CEC'
              --'INCLUDE ESI, NO CEC'
              --'INCLUDE CEC, NO ESI'
              'INCLUDE ESI, CEC'
              --'CEC ONLY'
              --'ESI ONLY'
              --'PARTIAL CEC ONLY' -- THIS LOOKS AT PROD TRANSACTIONS WHERE TRANSACTIONS ARE ASSOCIATED WITH SHIPPO MASTER AND
                                      -- ESI MASTER, BUT THE master_carrier_ext_account_id CONTAINS CPP OR CEC DOES
                                      -- NO COMPARABLE USPS DATA SET, THIS WILL COMPARE TO ALL OF CEC USPS
              --'CEC INTERNATIONAL ONLY' -- LOOKS FOR INTERNATIONAL TRANSACTIONS IN 'Managed 3rd Party Master Account'
                                            -- AND 'carrier own account'
              --'EXCLUDE CEC NATIONAL' -- THIS SHOULD BE THE IDEAL DATA SET INCLUDING BOTH SHIPPO MASTER ACCOUNTS, ESI,
                                            -- AND CEC INTERNATIONAL, IT CAN'T BE DIRECTLY MATCHED TO USPS BECAUSE CEC NATIONAL WILL
                                            -- MATCH TO TRANSACTIONS SHOWING AS SHIPPO MASTER IN PROD
                  AS include_accounts,
              'INDITEX_ZARA' -- THIS LOOKS AT WHETHER THE CUSTOMER IS ZARA USER ID: 1206048 | USPS MASTER: 1000043690
              --'NOT_INDITEX_ZARA'
                  AS zara,
              -- BELOW IS TO ACCOUNT FOR TOGGLE WHETHER OR NOT A QUERY IS A RETURNS QUERY AS THE EPS ID FILTER
                -- FROM THE BCG REPORTS IS DIFFERENT FOR RETURNS
              --'RETURN'
              'NOT RETURN'
                  AS eps_id_for_returns,
              -- BELOW DETERMINES THE DATE USED TO COMPILE USPS DATA
              'S3 DATE'
              --'MAILING DATE'
              --'TRANSACTION DATE'
                  AS usps_compare_date,
              -- BELOW DETERMINES WHETHER THE TRANSACTION FILTER TO MIRROR THE 1370 REPORT IN THE PROD QUERY IS ENABLED
                -- KEEP IN MIND IF INCLUDING FILTER, YOU STILL NEED TO SPECIFY WHICH FILTER IN PRODUCTION QUERY IE OUTBOUND, REFUND, RETURN
              'INCLUDE FILTER'
              --'EXCLUDE FILTER'
                  AS trx_filter_status,
              --'OUTBOUND'
              'REFUND'
              --'RETURN'
                 AS trx_type
          ),
     usps_detail AS --REFUND
         (
         SELECT
              -- FROM USPS QUERY
              master_account_type,
              mail_class_id,
              mail_class_name,
              national_international_svc,
              trx_month,
              trx_date,
              pic,
              COUNT(DISTINCT pic) pic_dcount,
              COUNT(pic) pic_count,
              SUM(usps_postage_cost) usps_postage_cost

         FROM
             (
             SELECT
                 CASE
                      WHEN
                          bamd.eps_account IN ('1000039729')
                          THEN 'Shippo Outbounds'
                      WHEN
                          bamd.eps_account IN ('1000039246')
                          THEN 'ESI Outbound'
                      WHEN
                          bamd.eps_account IN ('1000026687')
                          THEN 'Shippo Returns'
                      WHEN
                          bamd.eps_account IN ('1000052234')
                          THEN 'CEC Shippo Managed MIDs v2'
                      WHEN
                          bamd.eps_account IN ('1000051478')
                          THEN 'CEC mistake'
                      ELSE 'POSSIBLY ZARA'
                      END AS                                             master_account_type,
                  ref.c24_scan_mail_class                                mail_class_id,
                  CASE
                      WHEN
                          usl.usps_svc_lvl_name IS NOT NULL
                          THEN usl.usps_svc_lvl_name
                      ELSE 'UNKNOWN'
                      END AS                                             mail_class_name,
                  CASE
                      WHEN
                                  usl.usps_svc_lvl_name ILIKE '%global%'
                              OR
                                  usl.usps_svc_lvl_name ILIKE '%international%'
                          THEN 'INTERNATIONAL'
                      ELSE 'NATIONAL'
                      END AS                                             national_international_svc,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN ref.s3_based_transaction_month
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN ref.date_of_mailing_month
                      END AS                                             trx_month,
                  CASE
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                          THEN cast(ref.s3_based_transaction_date as date)
                      WHEN
                              (SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                          THEN cast(ref.d1_c14_date_of_mailing as date)
                      END AS                                             trx_date,
                  ref.c8_package_identification_code_pic                 pic,
                  ref.grouping_id grp_id,
                  ref.d1_c55_unused_label_refund_amount             usps_postage_cost

             FROM
                 (
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2021"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2022"
                 UNION ALL
                 SELECT
                    CAST("compiled_file" AS VARCHAR),
                    CAST("c0_source_file" AS VARCHAR),
                    CAST("c1_record_type" AS VARCHAR),
                    CAST("c2_master_mailer_id" AS VARCHAR),
                    CAST("c3_file_version_id" AS VARCHAR),
                    CAST("c4_null" AS VARCHAR),
                    CAST("c5_document_id" AS VARCHAR),
                    CAST("c6_record_position" AS VARCHAR),
                    CAST("c7_usage_indicator" AS VARCHAR),
                    CAST("c8_package_identification_code_pic" AS VARCHAR),
                    CAST("c9_piece_mailer_id" AS VARCHAR),
                    CAST("c10_customer_reference_number" AS VARCHAR),
                    CAST("c11_customer_manifest_transaction_id" AS VARCHAR),
                    CAST("c12_main_efn" AS VARCHAR),
                    CAST("c13_sub_efn" AS VARCHAR),
                    CAST("c14_date_of_mailing" AS VARCHAR),
                    CAST("c15_package_scan_date" AS VARCHAR),
                    CAST("c16_null_non_ul_field" AS VARCHAR),
                    CAST("c17_null" AS VARCHAR),
                    CAST("c18_null" AS VARCHAR),
                    CAST("c19_null" AS VARCHAR),
                    CAST("c20_manifest_package_destination_zip" AS VARCHAR),
                    CAST("c21_null" AS VARCHAR),
                    CAST("c22_scan_zip_code" AS VARCHAR),
                    CAST("c23_manifest_mail_class" AS VARCHAR),
                    CAST("c24_scan_mail_class" AS VARCHAR),
                    CAST("c25_null" AS VARCHAR),
                    CAST("c26_null" AS VARCHAR),
                    CAST("c27_manifest_processing_category" AS VARCHAR),
                    CAST("c28_null" AS VARCHAR),
                    CAST("c29_manifest_routing_barcode" AS VARCHAR),
                    CAST("c30_null_non_ul_field" AS VARCHAR),
                    CAST("c31_null" AS VARCHAR),
                    CAST("c32_manifest_weight" AS VARCHAR),
                    CAST("c33_sample_piece_weight" AS VARCHAR),
                    CAST("c34_null" AS VARCHAR),
                    CAST("c35_null" AS VARCHAR),
                    CAST("c36_null" AS VARCHAR),
                    CAST("c37_null" AS VARCHAR),
                    CAST("c38_null" AS VARCHAR),
                    CAST("c39_null" AS VARCHAR),
                    CAST("c40_null" AS VARCHAR),
                    CAST("c41_null" AS VARCHAR),
                    CAST("c42_null" AS VARCHAR),
                    CAST("c43_null_non_ul_field" AS VARCHAR),
                    CAST("c44_null" AS VARCHAR),
                    CAST("c45_evs_manifest_rate_indicator" AS VARCHAR),
                    CAST("c46_null_non_ul_field" AS VARCHAR),
                    CAST("c47_null" AS VARCHAR),
                    CAST("c48_null" AS VARCHAR),
                    CAST("c49_evs_calculated_zone" AS VARCHAR),
                    CAST("c50_null" AS VARCHAR),
                    CAST("c51_null" AS VARCHAR),
                    CAST("c52_total_mailer_manifested_postage" AS VARCHAR),
                    CAST("c53_evs_destination_entry_default_postage_amount" AS VARCHAR),
                    CAST("c54_usps_evs_manifest_recalculated_postage_paid" AS VARCHAR),
                    CAST("c55_unused_label_refund_amount" AS VARCHAR),
                    CAST("c56_extra_service_code_1st_svc" AS VARCHAR),
                    CAST("c57_extra_service1_amount" AS VARCHAR),
                    CAST("c58_null" AS VARCHAR),
                    CAST("c59_extra_service_code_2nd_svc" AS VARCHAR),
                    CAST("c60_extra_service2_amount" AS VARCHAR),
                    CAST("c61_null" AS VARCHAR),
                    CAST("c62_extra_service_code_3rd_svc" AS VARCHAR),
                    CAST("c63_extra_service3_amount" AS VARCHAR),
                    CAST("c64_null" AS VARCHAR),
                    CAST("c65_extra_service_code_4th_svc" AS VARCHAR),
                    CAST("c66_extra_service4_amount" AS VARCHAR),
                    CAST("c67_null" AS VARCHAR),
                    CAST("c68_extra_service_code_5th_svc" AS VARCHAR),
                    CAST("c69_extra_service5_amount" AS VARCHAR),
                    CAST("c70_null" AS VARCHAR),
                    CAST("c71_null" AS VARCHAR),
                    CAST("c72_null" AS VARCHAR),
                    CAST("c73_null" AS VARCHAR),
                    CAST("c74_null" AS VARCHAR),
                    CAST("c75_null" AS VARCHAR),
                    CAST("c76_null" AS VARCHAR),
                    CAST("c77_null" AS VARCHAR),
                    CAST("c78_null" AS VARCHAR),
                    CAST("c79_null" AS VARCHAR),
                    CAST("c80_null" AS VARCHAR),
                    CAST("c81_x" AS VARCHAR),
                    CAST("d1_c55_unused_label_refund_amount" AS REAL),
                    CAST("h1_c7_business_type_indicator" AS VARCHAR),
                    CAST("s1_c9_caps_transaction_id" AS VARCHAR),
                    CAST("s1_c10_caps_transaction_status_code" AS VARCHAR),
                    CAST("s1_c8_reporting_month" AS VARCHAR),
                    CAST("d1_c14_date_of_mailing" AS DATE),
                    CAST("d1_c15_package_scan_date" AS DATE),
                    CAST("s3_based_transaction_date" AS DATE),
                    CAST("s3_based_transaction_month" AS VARCHAR),
                    CAST("date_of_mailing_month" AS VARCHAR),
                    CAST("package_scan_date_month" AS VARCHAR),
                    CAST("grouping_id" AS VARCHAR)
                 FROM audit_data."22_audit_s3_refunds_merged_2023_01_2023_05"
                 ) ref

                -- CHANGE/CHECK JOIN FIELD MAPPINGS FOR RETURNS, REFUNDS, OUTBOUNDS
                LEFT JOIN
                    (
                     SELECT *
                     FROM audit_data.bcg_ach_mapping_detail
                     WHERE
                         (((SELECT eps_id_for_returns FROM query_variables) IN ('RETURN')
                                AND
                                (eps_id IS NULL))
                           OR
                          ((SELECT eps_id_for_returns FROM query_variables) IN ('NOT RETURN')
                                AND
                                (eps_id IS NOT NULL)))
                             -- Removes returns as returns are already linked to ach_id
                    ) AS bamd ON ref.s1_c9_caps_transaction_id = bamd.eps_id
                LEFT JOIN audit_data.usps_svc_lvl AS usl ON UPPER(ref.c24_scan_mail_class) = UPPER(usl.usps_svc_lvl_id)

             WHERE (
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         >=
                     DATEADD('DAY', (SELECT fuzzymatchmin FROM console_query_variables),
                             (SELECT source_tables_start_timestamp_filter FROM console_query_variables)))
                       )
                   AND
                   (((SELECT usps_compare_date FROM query_variables) IN ('S3 DATE')
                       AND
                     cast(ref.s3_based_transaction_date as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       OR
                    ((SELECT usps_compare_date FROM query_variables) IN ('MAILING DATE')
                        AND
                     cast(ref.d1_c14_date_of_mailing as date)
                         <
                     DATEADD('MONTH', (SELECT fuzzymatchmax FROM console_query_variables),
                             (SELECT source_tables_end_timestamp_filter FROM console_query_variables)))
                       )
               )
                 AND (ref.s1_c9_caps_transaction_id IS NOT NULL OR ref.s1_c9_caps_transaction_id NOT IN ('0'))
             GROUP BY
                  master_account_type,
                  mail_class_id,
                  mail_class_name,
                  national_international_svc,
                  grp_id,
                  trx_month,
                  trx_date,
                  pic,
                  usps_postage_cost
            --HAVING count(pic)>1
            ORDER BY pic desc
            --LIMIT 1000
             ) usps
         GROUP BY
            master_account_type, mail_class_id, mail_class_name, national_international_svc, trx_month, trx_date, pic
         --HAVING COUNT(pic)>1
         ORDER BY pic desc
         --LIMIT 1000
         )

--------------------------------------------
--------------------------------------------
-----SELECT STATEMENT-----------------------
--------------------------------------------
--------------------------------------------

SELECT
-- SHOW QUERY PARAMETERS FROM WITH STATEMENT
'ACCOUNTS: ' ||  (select include_accounts    from query_variables)    || ' | ' ||
'CUSTOMER: ' ||  (select zara                from query_variables)    || ' | ' ||
'RETURN: '   ||  (select eps_id_for_returns  from query_variables)    || ' | ' ||
'DATE: '     ||  (select usps_compare_date   from query_variables)    || ' | ' ||
'FILTER: '   ||  (select trx_filter_status   from query_variables)    || ' | ' ||
'TYPE: '     ||  (select trx_type from query_variables) AS query_param,

-- ID FIELDS
txnd.api_transaction_id,
txnd.tracking_number,

-- USPS PEF FIELDS
uspsd.pic_count usps_pic_count,
uspsd.usps_postage_cost,
uspsd.trx_date usps_trx_date,
uspsd.master_account_type usps_master_account_type,
uspsd.mail_class_id usps_service_level_id,
uspsd.mail_class_name usps_service_level,
uspsd.national_international_svc,

-- Amount fields
txnd.est_postage_cost,
txnd.actual_postage_cost,
txnd.user_rate,
txnd.insurance_amount,
--txnd.insurance_fee,
txnd.insurance_cost,

-- INVOICE TABLES
--invd.invoice_id,
invd.currency,
invd.invcharge                                   invd_charge,
invd.invrefund                                   invd_refund,
invd.invcharge_paid_inv,
invd.invrefund_paid_inv,
invd.invcharge_paid_inv_status,
invd.invrefund_paid_inv_status,
invd.invcharge_paid_bp,
invd.invrefund_paid_bp,
invd.label_payment,
invd.label_payment_ref,
invd.label_failure,
invd.label_failure_ref,
invd.label_surcharge,
invd.label_surcharge_ref,
invd.label_refund,
invd.label_refund_ref,
invd.rebate,
invd.rebate_ref,
invd.one_off_credit,
invd.one_off_credit_ref,
invd.legacy_charge,
invd.legacy_charge_ref,
invd.legacy_refund,
invd.legacy_refund_ref,
invd.track_fee,
invd.track_fee_ref,
invd.address_validation_fee,
invd.address_validation_fee_ref,
invd.branding,
invd.branding_ref,
invd.multi_user_login,
invd.multi_user_login_ref,
invd.insurance_fee,
invd.insurance_fee_ref,
invd.label_fee,
invd.label_fee_ref,
invd.subscription_plan_fee,
invd.subscription_plan_fee_ref,
invd.postage_price,
invd.postage_price_ref,
invd.promo_code_credit,
invd.promo_code_credit_ref,
invd.label_price_true_up_charge,
invd.label_price_true_up_charge_ref,
invd.label_price_true_up_refund,
invd.label_price_true_up_refund_ref,
invd.preauth_capture,
invd.preauth_capture_ref,

-- RECON TABLES
recon.unknown,
recon.refund,
recon.cubic,
recon.wrong_dimensions_weight,
recon.repeat_lbl_use,
recon.unmanifested_lbl,
recon.postage_adj_factor,
recon.transaction_recognition,
recon.incorrect_postage,
recon.postage_charge,
recon.deterministic_surcharge,
recon.total_addtnl_calc_carrier_cost,

-- Attribute fields
-------------------

txnd.zone,
txnd.was_test,
txnd.api_transaction_object_state,
txnd.api_transaction_object_status,
txnd.entry_point,
txnd.scan_form_id,
txnd.api_refund_object_status,
txnd.api_refund_carrier_status,
txnd.discount_group_name,
txnd.track_status_id,
txnd.track_status_name,
txnd.servicelevel_id,
txnd.servicelevel_name,
txnd.provider_id,
car.name                                         carrier,

-- Carrier Account information
acctd.id                                         api_account_id,
acctd.account_id,
acctd.ext_account_id,
acctd.master_carrier_account_id,

-- Submission Status
subt.sub_id,
subt.sub_type_id,

-- Shipping information
shipd.submission_type,
shipd.id                                         api_shipment_id,
shipd.zip_exclusion,
shipd.is_return,
shipd.return_of_id,
shipd.out_or_rtn,

shipd.origin_zip,
--shipd.origin_company_name,
--shipd.origin_name,

shipd.destination_zip,
--shipd.destination_company_name,
--shipd.destination_name,

shipd.return_zip,
--shipd.return_company_name,
--shipd.return_name,

--shipd.alttoaddr_zip,
--shipd.alttoaddr_company_name,
--shipd.alttoaddr_name,

-- Platform information
pfrmd.pf_name                                    platform_name,

-- Additional Company Information
txnd.api_transaction_object_owner                auth_user_id,
txnd.api_user_id, --AKA user_id

--daddr.company addr_company_name,
--daddr.name addr_user_name,
--txnd.username,
--txnd.company_name_override,

-- Company or username - Combination of OLTP company and user fields with no censorship
CASE
    WHEN (txnd.company_name_override IS NOT NULL and txnd.company_name_override NOT IN (''))
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL and daddr.company NOT IN ('')
        THEN daddr.company
    ELSE txnd.username
    END AS                                       company_or_username,

-- Company Name - in DWH, user dim company name is an amalgamation of fields from prod per Calvin 20220427
CASE
    WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
        THEN txnd.company_name_override
    WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
        THEN daddr.company
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
    WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
        THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
    ELSE 'NOT SET'
    END AS                                       looker_company_name,

-- Incorrect Postage Classification

CASE
    WHEN recon.incorrect_postage > 0 then 'shippo_undercharge'
    WHEN recon.incorrect_postage < 0 then 'shippo_overcharge'
    ELSE NULL
    END AS                                       incorrect_postage_impact,

-- Transaction submitted

CASE
    WHEN subt.sub_type_id = '1' then 'submitted'
    Else 'not submitted'
    END AS                                       submission_status,

-- DWH EQUIVALENT FORMULAE --
-----------------------------
CASE
    WHEN ((txnd.api_refund_object_status NOT IN ('SUCCESS')
        OR txnd.api_refund_object_status IS NULL
        OR txnd.api_refund_approve_time IS NULL
        OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE IN PERIOD NO REFUND'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)
        AND ((((shipd.out_or_rtn IN ('return')
            OR (shipd.out_or_rtn IN ('outbound')
                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
            AND invd.first_inv_date IS NOT NULL)
            AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
            AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
            OR
             (((shipd.out_or_rtn IN ('outbound')
                 AND txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound'))
                 OR ((shipd.out_or_rtn IN ('return')
                     OR (shipd.out_or_rtn IN ('outbound')
                         AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
                     AND invd.first_inv_date IS NULL))
                 AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                 AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
        THEN 'PURCHASE & REFUND IN PERIOD'
    WHEN (txnd.api_refund_object_status IN ('SUCCESS')
        AND txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
        AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables))
        THEN 'REFUND IN PERIOD NO PURCHASE'
    END AS                                       dwh_purchase_status,

-- Show prod master account type
CASE
    WHEN acctd.master_carrier_account_id IS NOT NULL
    THEN lma.carrier_own_account_indicator
    ELSE lca.carrier_own_account_indicator
    END AS dwh_master_account_type,




--------------------------------------------
-----DATES----------------------------------
--------------------------------------------

-- date/times
-----------------

-- MMM-YY Format Dates
txnd.lbl_generation_mnth,
txnd.refund_date_mnth,

-- Purchase date month does NOT include refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN to_char(invd.first_inv_date, 'MON-YY')
    ELSE to_char(txnd.api_transaction_object_created, 'MON-YY')
    END
        AS                                       purchase_date_mnth_no_ref_appv,

-- YYYY-MM-DD FORMAT DATES

-- Purchase date does NOT account for refund approval date PST

CASE
    WHEN ((shipd.out_or_rtn IN ('return')
        OR (shipd.out_or_rtn IN ('outbound')
            AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')))
        AND invd.first_inv_date IS NOT NULL)
        THEN invd.first_inv_date
    ELSE txnd.api_transaction_object_created
    END
        AS                                       purchase_date_no_ref_appv,

-- to_char(date(chrg.last_recon_date AT TIME ZONE 'US/Pacific'), 'YYYY-MM-DD') last_recon_date,

to_char(invd.first_inv_date, 'YYYY-MM-DD')       first_invoice_date,

to_char(invd.last_inv_date, 'YYYY-MM-DD')        last_invoice_date,

to_char(invd.inv_to_merchant_date, 'YYYY-MM-DD') invoiced_to_merchant_date,

txnd.refund_approval_time,

txnd.lbl_generation_date,

-- Date+Times

--txnd.refund_approval_time                   refund_approve_datetime, --not picking up date/time, need to update CTE if needed

invd.first_inv_date                              first_inv_datetime,

invd.inv_to_merchant_date                        invoiced_to_merchant_datetime,

txnd.api_transaction_object_created              lbl_gen_datetime


--------------------------------------------
-----SOURCE & JOINS-------------------------
--------------------------------------------

FROM
    (
     SELECT * FROM transaction_detail
     UNION
     SELECT * FROM zara_transaction_detail
    ) txnd

-- CTE (WITH) JOINS
         --INNER
         LEFT JOIN default_address AS daddr ON txnd.api_transaction_object_owner = daddr.object_owner_id
         LEFT JOIN submission_type AS subt ON txnd.api_transaction_id = subt.transaction_id
         LEFT JOIN reconciliation AS recon ON txnd.api_transaction_id = recon.transaction_id
         LEFT JOIN invoice_detail AS invd ON txnd.api_transaction_id = invd.transaction_id
         LEFT JOIN shipment_detail AS shipd ON txnd.shipment_id = shipd.id
         LEFT JOIN account_detail AS acctd ON txnd.account_id = acctd.id
         LEFT JOIN platform_detail AS pfrmd ON txnd.platform_id = pfrmd.pf_id
         LEFT JOIN usps_detail AS uspsd ON txnd.tracking_number = uspsd.pic
                AND uspsd.trx_date >= DATEADD('DAY',(SELECT fuzzymatchmin FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))
                AND uspsd.trx_date <= DATEADD('MONTH',(SELECT fuzzymatchmax FROM console_query_variables),
                    CAST(txnd.api_transaction_object_created AS TIMESTAMP))

-- ADDTNL JOINS
         LEFT JOIN audit_data_se01_20230327.adapter_provider car ON txnd.provider_id = car.id
         LEFT JOIN audit_data."22_audit_prod_looker_returns_gap_jan-dec_detail" rgap ON txnd.api_transaction_id = rgap.api_transaction_id
         LEFT JOIN audit_data."22_audit_prod_looker_outbounds_gap_jan-dec_detail" ogap ON txnd.api_transaction_id = ogap.api_transaction_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    master_carrier_account_id,
                    master_carrier_ext_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NOT NULL
            GROUP BY 1,2,3) AS lma ON acctd.master_carrier_account_id = lma.master_carrier_account_id
         LEFT JOIN
            (SELECT carrier_own_account_indicator,
                    carrier_account_id
                FROM audit_data.looker_1370_accounts
                    WHERE master_carrier_account_id IS NULL
            GROUP BY 1,2) AS lca ON acctd.id = lca.carrier_account_id
         LEFT JOIN
            (SELECT service_level_id
                FROM audit_data.looker_svc_lvl
                    WHERE (service_level_name ILIKE '%international%'
                            OR
                           service_level_name ILIKE '%global%')
            GROUP BY service_level_id) AS lsl ON txnd.servicelevel_id = lsl.service_level_id

--------------------------------------------
-----WHERE CONSTRAINTS----------------------
--------------------------------------------

WHERE

-- OLTP TO DWH TRANSFORM LOGIC
------------------------------
------------------------------

-- Filters for transaction types
    (((SELECT trx_filter_status from query_variables) IN ('INCLUDE FILTER')
        AND
        (
            (
                  (SELECT trx_type from query_variables) IN ('RETURN')
                AND
              -- RETURNS
                  (((shipd.out_or_rtn IN ('return')
                      AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL)) --IS NULL
                      OR (shipd.out_or_rtn IN ('return')
                          AND txnd.api_refund_object_status IN ('SUCCESS')
                          AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                              AND txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                      AND ((invd.first_inv_date IS NOT NULL
                          AND txnd.track_status_id NOT IN ('1', '6') -- OLTP to DWH transform logic 20220422
                          AND (invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                              AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables)))
                          OR (invd.first_inv_date IS NULL
                              AND txnd.track_status_id NOT IN ('1', '6')
                              AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                  AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))))
              -- [OUTSTANDING QUESTION] What do we do with a return /wo a first_inv_date
            )
            OR
            (
                    (SELECT trx_type from query_variables) IN ('REFUND')
                AND
                -- REFUNDS
                    ((txnd.api_refund_object_status IN ('SUCCESS')
                        AND ((shipd.out_or_rtn IN ('return')
                            AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6'))
                            OR (shipd.out_or_rtn IN ('outbound')
                                AND (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound')))))
                        AND (txnd.api_refund_approve_time >= (select query_start_timestamp_filter from console_query_variables)
                            AND txnd.api_refund_approve_time < (select query_end_timestamp_filter from console_query_variables)))
            )
            OR
            (
                        (SELECT trx_type from query_variables) IN ('OUTBOUND')
                    AND
                    -- OUTBOUND
                        (((shipd.out_or_rtn in ('outbound')
                            AND (txnd.api_refund_object_status NOT IN ('SUCCESS') OR txnd.api_refund_object_status IS NULL))
                            OR (shipd.out_or_rtn in ('outbound')
                                AND txnd.api_refund_object_status IN ('SUCCESS')
                                AND (txnd.api_refund_approve_time < (select query_start_timestamp_filter from console_query_variables)
                                    OR txnd.api_refund_approve_time >= (select query_end_timestamp_filter from console_query_variables))))
                            AND ((txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                AND txnd.track_status_id NOT IN ('1', '6')
                                AND first_inv_date IS NOT NULL
                                AND invd.first_inv_date >= (select query_start_timestamp_filter from console_query_variables)
                                AND invd.first_inv_date < (select query_end_timestamp_filter from console_query_variables))
                                OR (txnd.scanbased_outbound_indicator IN ('Scan-Based Outbound')
                                    AND txnd.track_status_id NOT IN ('1', '6')
                                    AND first_inv_date IS NULL
                                    AND (txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                        AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables)))
                                OR (txnd.scanbased_outbound_indicator NOT IN ('Scan-Based Outbound') -- OLTP TO DWH transform logic 20221130
                                    AND txnd.api_transaction_object_created >= (select query_start_timestamp_filter from console_query_variables)
                                    AND txnd.api_transaction_object_created < (select query_end_timestamp_filter from console_query_variables))))
                --[OUTSTANDING QUESTION] What do we do with a scan-based outbound /wo a first_inv_date
            )
        )
    )    OR
        (SELECT trx_filter_status from query_variables) IN ('EXCLUDE FILTER'))

-- Standard Criteria for Outbound, Returns, Refunds
-- Attribute filters
  -- recon.incorrect_postage IS NOT NULL

--  AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
--    acctd.id IS NOT NULL
--  AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
--    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL)
  AND -- MAKE SURE WE'RE ONLY LOOKING AT TRANSACTIONS ASSOCIATED WITH USPS PEF FILES
    (uspsd.pic IS NOT NULL)
  AND -- MAKE SURE WE ARE OR AREN'T PULLING IN ZARA
    (((SELECT zara from query_variables) IN ('INDITEX_ZARA')
        AND txnd.au_id IN ('1206048'))
        OR
     (((SELECT zara from query_variables) IN ('NOT_INDITEX_ZARA')
         AND txnd.au_id NOT IN ('1206048')
         AND -- MAKE SURE EACH TRANSACTION HAS AN ACCOUNT ID
             acctd.id IS NOT NULL
         AND -- MAKE SURE WE'RE EXCLUDING TRANSACTIONS MISSING FROM 1370 IN ANALYSIS
    (rgap.api_transaction_id IS NULL and ogap.api_transaction_id IS NULL))
         AND -- MAKE SURE WE'RE LOOKING AT THE RIGHT ACCOUNTS
      (
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE ESI, CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                           'Express Save Master Account',
                                           'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, NO CEC')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE CEC, NO ESI')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator NOT IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('INCLUDE ESI, CEC') --generic label just to test
                      AND
                          (
                                  lma.master_carrier_account_id IS NOT NULL
                                  OR
                                  (lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('ESI ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Express Save Master Account'
                                              ))
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('PARTIAL CEC ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND
                                   lma.carrier_own_account_indicator IN --lca is NOT included b/c master_carrier_ext_account_id only maps to master accounts
                                   (
                                    'Express Save Master Account',
                                    'Shippo FC Master Account',
                                    'Shippo Master Account'
                                       ))
                                  AND
                                  (lma.master_carrier_ext_account_id ILIKE '%cpp%'
                                      OR
                                   lma.master_carrier_ext_account_id ILIKE '%cec%')
                              )
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('CEC INTERNATIONAL ONLY')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND lma.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND lca.carrier_own_account_indicator IN
                                          (
                                              'Managed 3rd Party Master Account'
                                              ))
                              )
                      AND
                          lsl.service_level_id IS NOT NULL
                  )
              OR
              (
                          (SELECT include_accounts FROM query_variables) IN ('EXCLUDE CEC NATIONAL')
                      AND
                          (
                                  (lma.master_carrier_account_id IS NOT NULL
                                      AND NOT (lma.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                                  OR
                                  ((lma.master_carrier_account_id IS NULL
                                      AND lca.carrier_account_id IS NOT NULL)
                                      AND NOT (lca.carrier_own_account_indicator IN
                                               (
                                                   'Managed 3rd Party Master Account'
                                                   )
                                          AND lsl.service_level_id IS NULL))
                              )
                  )
          )
         )
        )

-- LOGIC FOR THIS SECTION WAS MOVED TO WITH STATEMENT AND REPLACED BY THE ABOVE LINE
--  AND (
--        (acctd.id in ('6536') AND acctd.account_id in ('shippo_usps_master'))
--        -- Unsure what the relevance of 6536 is, have created ticket ENG-37145
--        OR
--        acctd.master_carrier_account_id IN ('100367')
--    )

  AND ((
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%goshippo.com%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('%popout%')
           )
    AND (
               CASE
                   WHEN txnd.company_name_override IS NOT NULL AND txnd.company_name_override NOT IN ('')
                       THEN txnd.company_name_override
                   WHEN daddr.company IS NOT NULL AND daddr.company NOT IN ('')
                       THEN daddr.company
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       AND SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) = 'goshippo.com'
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1)
                   WHEN txnd.username IS NOT NULL AND txnd.username NOT IN ('')
                       THEN SUBSTRING(txnd.username, (POSITION('@' IN txnd.username)) + 1) || '-' || RIGHT(txnd.api_transaction_object_owner::VARCHAR, 4)
                   ELSE 'NOT SET'
                   END NOT ILIKE ('shippo%')
           )
           )

ORDER BY txnd.api_transaction_id
--limit 10
--;
)

WHERE submission_status IN ('submitted')

GROUP BY
    prod_query_type, query_param, lbl_generation_mnth, refund_date_mnth, purchase_date_mnth_no_ref_appv, out_or_rtn, submission_status

ORDER BY query_param
;